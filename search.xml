<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安装命令</title>
      <link href="/20240319040826/"/>
      <url>/20240319040826/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a3f55d42b095c25640745c9aadadc6098cd91baf69129e3799c6ebe39e409cf1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="当前文章暂不对外可见，请输入密码后查看！">当前文章暂不对外可见，请输入密码后查看！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Private </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注水井综合评价系统</title>
      <link href="/20230720082452/"/>
      <url>/20230720082452/</url>
      
        <content type="html"><![CDATA[<blockquote><p>项目后端<a href="/20230720093159">脱敏</a>后已在Github Public<br><a href="https://github.com/izyq/flooding">GitHub - izyq/flooding: 油田注水综合评价系统</a></p></blockquote><h2 id="总体架构">总体架构</h2><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//202307202034696.png" alt="" loading="lazy"></p><h2 id="网络结构">网络结构</h2><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//202307202035063.png" alt="" loading="lazy"></p><h2 id="个人总结">个人总结</h2><p>从最开始的需求分析、系统设计数据库设计，再到后端架构和代码的编写，每个环节我让我学习到了新的知识。方向比速度更重要，我认识到前期的调研和需求分析的至关重要，如果不把业务理解透彻，那么写再多的代码都是在做无用功。之前我对微服务只是浅尝辄止，但是通过该项目，我对微服务的架构、意义有了更加深入的理解，我想在此谈谈我的认识。</p><p>在本项目中，整合了Spring Security、Spring Gateway、Spring Cloud、Dubbo以及加上nacos注册中心这样的微服务生态，通过对这些模块的整合我更加理解他们之间是如何协同运作的，首先网关是是服务的第一入口，在它上面做的事情很多。我们在网关配置好的相关路由后，比如对于网关识别到/api后缀，会对请求进行转发，向相关服务发出请求。在这里，我还将spring-cloud-starter-loadbalancer整合进了网关层，网关在收到请求后，会向nacos注册中心获取所有健康的集群的实例，并对向他们发出的请求实施负载均衡。当然，网关在向服务层发起请求之前，还有一件重要的事情，就是对用户发出的请求进行统一鉴权，通过解析JWT的token，获取到请求用户的信息和对应的权限信息，如果权限不足则直接返回，权限满足的情况下，又如何让业务层知道该请求是由哪个用户发出的呢，本项目中我们将在网关层通过token解析出来的用户信息再打到向业务层转发的请求的header上，业务层通过对http request header的读取，解析出用户相关信息，并对用户进行的操作进行记录。除此之外，网关在返回业务层数据的时候，也可以进行处理，对不符合统一响应的返回数据进行包装，对异常信息做同一处理。所以其实讲网关说成是一个过滤器链执行框架也不为过。</p><p>接下来再说一下动态配置，像网关这种服务，作为所有请求的入口，必须保持高可用性。那么如果有新业务上线，需要添加新的路由，或者需要修改已有的路由时，每次都要重启网关服务吗？答案是否定的，这时候又是nacos发挥作用的时候了，nacos可以对各个服务进行动态配置，在需要进行动态配置的服务引入spring-cloud-starter-alibaba-nacos-config依赖，再对nacos连接进行相关配置即可生效。当我们需要对网关加入一条新的路由时，只需在nacos中修改配置并发布，服务端监听到配置变更，便会加载变更。</p><h2 id="项目介绍">项目介绍</h2><p>注水井开发效果综合评价系统软件是用于评估注水井在油田开发中的效果的工具。它结合了数据分析、模型计算和可视化展示等技术，通过对注水井运行数据的处理和分析，提供全面、准确的评价结果，帮助油田管理者和工程师做出科学决策。</p><p><strong>以下是该系统软件的实现技术和特点：</strong></p><ol><li>数据采集与处理：系统软件通过与注水井监测设备的连接，实时采集注水井的运行数据，包括注水压力、注水流量、注入液体的成分等。同时，对采集到的数据进行预处理，包括数据清洗、异常值处理和数据归一化等，确保数据的准确性和可靠性。</li><li>模型建立与计算：系统软件基于油田注水井的工程原理和流体力学模型，建立评价模型。通过对采集到的数据进行模型计算，评估注水井的效果。常用的模型包括注入水体的扩散模型、压裂模型、地层渗流模型等。根据实际情况和需求，可以采用不同的模型进行评价，并结合多种模型结果进行综合分析。</li><li>数据分析与可视化展示：系统软件通过数据分析算法，对模型计算结果进行综合分析，提取关键指标和特征。同时，采用图表、曲线和地图等可视化手段，将评价结果以直观的形式展示出来。这样可以帮助用户更好地理解评价结果，发现潜在问题和趋势，做出相应的调整和决策。</li><li>数据管理与报告生成：系统软件提供数据管理功能，可以对注水井的历史数据进行存储和管理，便于用户查阅和比对不同时间段的数据。同时，系统软件还可以生成详细的评价报告，包括评价结果、关键指标分析、图表和曲线展示等，帮助用户进行全面的分析和决策。</li></ol><p><strong>该系统软件的特点如下：</strong></p><ol><li>综合评价能力：系统软件综合考虑了注水井的多个因素和指标，包括注水效率、注水范围、注入液体的分布等，从多个维度评价注水井的开发效果。这样可以全面了解注水井的运行情况，及时发现问题并采取相应措施。</li><li>实时性和准确性：系统软件可以实时采集和处理注水井的数据，并进行实时计算和分析，提供及时准确的评价结果。这样可以及时发现问题和异常，避免潜在的风险和损失。</li><li>用户友好性：系统软件提供简洁直观的用户界面，操作简便，易于使用。同时，通过可视化展示和报告生成，使得评价结果易于理解和传达，方便用户做出决策。</li><li>可定制性和扩展性：系统软件可以根据不同油田的实际情况和需求进行定制和调整。同时，具备良好的扩展性，可以集成更多的评价模型和算法，以适应不断变化的需求和技术发展。</li><li>注水井开发效果综合评价系统软件通过数据采集、模型计算、数据分析和可视化展示等技术，帮助油田管理者和工程师全面评估注水井的效果，并做出科学决策，提高油田开发的效率和效果。</li></ol><h2 id="记录">记录</h2><h3 id="Nacos-单机运行">Nacos 单机运行</h3><pre class="line-numbers language-Bash" data-language="Bash"><code class="language-Bash">docker run -d \--name nacos-standalone \-e PREFER_HOST_MODE&#x3D;hostname \-e MODE&#x3D;standalone \-e JVM_XMS&#x3D;256m \-e JVM_XMX&#x3D;256m \-v &#x2F;root&#x2F;nacos-server&#x2F;logs&#x2F;:&#x2F;home&#x2F;nacos&#x2F;logs \-p 8848:8848 \nacos&#x2F;nacos-server:1.4.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Docker部署的Spring-Cloud微服务注册到Nacos的IP为私网无法访问">Docker部署的Spring Cloud微服务注册到Nacos的IP为私网无法访问</h3><blockquote><p><a href="https://lucent.blog/?p=90">在Nacos中让服务使用指定网段ip注册 - Lucent’s Blog</a><br><a href="https://www.cnblogs.com/haoxianrui/p/14091590.html">Docker部署的Spring Cloud微服务注册到Nacos的IP为私网无法访问 - 有来技术 - 博客园</a></p></blockquote><h4 id="指定IP">指定IP</h4><pre class="line-numbers language-none"><code class="language-none">spring:  cloud:    nacos:      discovery:        ip: 192.144.220.153<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置主机模式">设置主机模式</h4><p><code>docker run -d --network=host --restart=always</code></p><h4 id="指定网段IP注册">指定网段IP注册</h4><pre class="line-numbers language-none"><code class="language-none">cloud:  inetutils:    ignored-interfaces: eth.*    preferred-networks:      - 192.168      - 192<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查看docker桥接模式网络配置后，发现这种方式应该是没用的</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:03            inet addr:172.17.0.3  Bcast:172.17.255.255  Mask:255.255.0.0          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:1038533 errors:0 dropped:0 overruns:0 frame:0          TX packets:1226213 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:0           RX bytes:379406899 <span class="token punctuation">(</span><span class="token number">361.8</span> MiB<span class="token punctuation">)</span>  TX bytes:397027737 <span class="token punctuation">(</span><span class="token number">378.6</span> MiB<span class="token punctuation">)</span>lo        Link encap:Local Loopback            inet addr:127.0.0.1  Mask:255.0.0.0          UP LOOPBACK RUNNING  MTU:65536  Metric:1          RX packets:4 errors:0 dropped:0 overruns:0 frame:0          TX packets:4 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:1000           RX bytes:288 <span class="token punctuation">(</span><span class="token number">288.0</span> B<span class="token punctuation">)</span>  TX bytes:288 <span class="token punctuation">(</span><span class="token number">288.0</span> B<span class="token punctuation">)</span>Disconnected from container.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="NACOS-鉴权">NACOS 鉴权</h2><p>添加 <code>-e NACOS_AUTH_ENABLE=true</code><br><a href="https://nacos.io/zh-cn/docs/auth.html">Authorization</a></p><h2 id="Dubbo">Dubbo</h2><h3 id="注册到注册中心的地址是内网IP">注册到注册中心的地址是内网IP</h3><blockquote><p>可以通过dubbo.protocol或dubbo.provider的host属性对host进行配置,支持IP地址和域名.但此时注册到注册中心的IP地址和监听IP地址是同一个值<br>为了解决在虚拟环境或局域网内consumer无法与provider通信的问题,可以通过环境变量分别设置注册到注册中心的IP地址和监听IP地址,其优先级高于dubbo.protocol或dubbo.provider的host配置</p></blockquote><p><a href="https://cn.dubbo.apache.org/zh-cn/docs/advanced/set-host/">主机配置 | Apache Dubbo</a></p><h3 id="通过docker运行">通过docker运行</h3><pre class="line-numbers language-none"><code class="language-none">-e DUBBO_IP_TO_REGISTRY&#x3D;公网IP-p 9005:9005 -p 20880:20880<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">ENV TZ&#x3D;Asia&#x2F;ShanghaiENV DUBBO_IP_TO_REGISTRY&#x3D;公网IP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="获取不到Bean">获取不到Bean</h3><p>原本在单体项目中是这样<br>使用<code>SpringUtils.getBean</code></p><blockquote><p><code>SpringUtils.getBean</code>需要具体实现，可以在网上搜</p></blockquote><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">IWellService wellService &#x3D; SpringUtils.getBean(IWellService.class);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>微服务进行了拆分所以会报错</p><p>实现<code>DubboBean.getDubboBean</code>方法，解决</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">IWellService wellService &#x3D; DubboBean.getDubboBean(IWellService.class);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package club.cupk.waterflood.util;    import org.apache.dubbo.config.spring.ReferenceBean;  import org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor;  import xin.altitude.cms.common.util.SpringUtils;    import java.util.Collection;    public class DubboBean &#123;  public static &lt;T&gt; T getDubboBean(Class&lt;T&gt; requiredType)&#123;  ReferenceAnnotationBeanPostProcessor dubboContext &#x3D; SpringUtils.getBean(ReferenceAnnotationBeanPostProcessor.class);  Collection&lt;ReferenceBean&lt;?&gt;&gt; referenceBeans &#x3D; dubboContext.getReferenceBeans();  for (ReferenceBean&lt;?&gt; referenceBean : referenceBeans) &#123;  Class&lt;?&gt; objectType &#x3D; referenceBean.getObjectType();  if(objectType &#x3D;&#x3D; requiredType)&#123;  return (T)referenceBean.getObject();  &#125;  &#125;  return null;  &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Wrapper">Wrapper</h3><div class="note danger"><h5 id="警告">警告:</h5><p>不支持以及不赞成在 RPC 调用中把 Wrapper 进行传输</p><ol><li>wrapper 很重</li><li>传输 wrapper 可以类比为你的 controller 用 map 接收值(开发一时爽,维护火葬场)</li><li>正确的 RPC 调用姿势是写一个 DTO 进行传输,被调用方再根据 DTO 执行相应的操作</li><li>我们拒绝接受任何关于 RPC 传输 Wrapper 报错相关的 issue 甚至 pr</li></ol></div><h2 id="Spring-Cloud-Gateway负载均衡">Spring Cloud Gateway负载均衡</h2><blockquote><p><a href="https://www.jianshu.com/p/9623f9fb160b">Spring Cloud Gateway负载均衡 - 简书</a><br><a href="https://blog.csdn.net/lingbomanbu_lyl/article/details/125325705">Spring Cloud Gateway整合Nacos实现服务路由及集群负载均衡_gateway nacos 负载均衡_凌波漫步&amp;的博客-CSDN博客</a></p></blockquote><h3 id="lb-lakerservice不生效"><code>lb://lakerservice</code>不生效</h3><p>加入依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-loadbalancer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用RouteRecordGlobalFilter记录路由后的实际代理地址">用RouteRecordGlobalFilter记录路由后的实际代理地址</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">@Slf4j@Componentpublic class RouteRecordGlobalFilter implements GlobalFilter, Ordered &#123;@Overridepublic Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123;&#x2F;&#x2F; RouteToRequestUrlFilter会把实际路由的URL通过该属性保存URI proxyRequestUri &#x3D; exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_REQUEST_URL_ATTR);long start &#x3D; System.currentTimeMillis();return chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;long end &#x3D; System.currentTimeMillis();log.info(&quot;实际调用地址为：&#123;&#125;，调用耗时为：&#123;&#125;ms&quot;, proxyRequestUri, (end - start));&#125;));&#125;@Overridepublic int getOrder() &#123;&#x2F;&#x2F; 优先级设为最低，先让RouteToRequestUrlFilter先调用return Ordered.LOWEST_PRECEDENCE;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="YAML">YAML</h3><h4 id="Local">Local</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">gateway</span><span class="token punctuation">:</span>  <span class="token key atrule">discovery</span><span class="token punctuation">:</span><span class="token comment">#开启负载均衡</span>    <span class="token key atrule">locator</span><span class="token punctuation">:</span>      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>      <span class="token comment">#服务名小写</span>      <span class="token key atrule">lower-case-service-id</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">loadbalancer</span><span class="token punctuation">:</span>    <span class="token key atrule">use404</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Nacos">Nacos</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token comment"># 允许跨域请求配置</span>      <span class="token key atrule">globalcors</span><span class="token punctuation">:</span>        <span class="token key atrule">cors-configurations</span><span class="token punctuation">:</span>          <span class="token key atrule">'[/**]'</span><span class="token punctuation">:</span>            <span class="token comment"># 允许任何域名使用</span>            <span class="token key atrule">allowedOrigins</span><span class="token punctuation">:</span> <span class="token string">"*"</span>            <span class="token comment"># 允许任何头</span>            <span class="token key atrule">allowedHeaders</span><span class="token punctuation">:</span> <span class="token string">"*"</span>            <span class="token comment"># 允许任何方法(post、get等)</span>            <span class="token key atrule">allowedMethods</span><span class="token punctuation">:</span> <span class="token string">"*"</span>            <span class="token comment"># sessionid 多次访问一致</span>            <span class="token key atrule">allowCredentials</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>        <span class="token comment"># 允许来自所有域名(allowedOrigins)的所有请求方式(allowedMethods)发出CORS请求</span>        <span class="token key atrule">add-to-simple-url-handler-mapping</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment"># 允许来自所有域名(allowedOrigins)的所有请求方式(allowedMethods)发出CORS请求</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> waterflood<span class="token punctuation">-</span>consumer          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//waterflood<span class="token punctuation">-</span>consumer          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/api/<span class="token important">**</span>          <span class="token key atrule">filters</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> StripPrefix=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 脱敏</title>
      <link href="/20230720093159/"/>
      <url>/20230720093159/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://rtyley.github.io/bfg-repo-cleaner/">BFG Repo-Cleaner by rtyley</a><br><a href="https://docs.github.com/zh/authentication/keeping-your-account-and-data-secure/removing-sensitive-data-from-a-repository">从存储库中删除敏感数据 - GitHub 文档</a></p></blockquote><p>Mac 直接 Homebrew</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> bfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>直接输入bfg就能看到help信息啦</p><h3 id="删除误上传的大文件">删除误上传的大文件<a href="https://blog.walterlv.com/post/clean-up-git-repo-using-bfg.html#%E5%88%A0%E9%99%A4%E8%AF%AF%E4%B8%8A%E4%BC%A0%E7%9A%84%E5%A4%A7%E6%96%87%E4%BB%B6"></a></h3><p>使用下面的命令，可以将仓库历史中大于 500M 的文件都删除掉。</p><pre class="line-numbers language-none"><code class="language-none">bfg --strip-blobs-bigger-than 500M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除特定的一个或多个文件">删除特定的一个或多个文件<a href="https://blog.walterlv.com/post/clean-up-git-repo-using-bfg.html#%E5%88%A0%E9%99%A4%E7%89%B9%E5%AE%9A%E7%9A%84%E4%B8%80%E4%B8%AA%E6%88%96%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6"></a></h3><p>删除 <code>walterlv.snk</code> 文件：</p><pre class="line-numbers language-none"><code class="language-none">bfg --delete-files walterlv.snk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除 walterlv.snk 或 lindexi.snk 文件：</p><pre class="line-numbers language-none"><code class="language-none">bfg --delete-files &#123;walterlv,lindexi&#125;.snk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>比如原来仓库结构是这样的：</p><pre class="line-numbers language-none"><code class="language-none">- README.md- Security.md- walterlv.snk+ test    - lindexi.snk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么删除完后，根目录的 walterlv.snk 和 test 子目录下的 lindexi.snk 就都删除了。</p><h3 id="删除文件夹">删除文件夹<a href="https://blog.walterlv.com/post/clean-up-git-repo-using-bfg.html#%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9"></a></h3><p>删除名字为 walterlv 的文件夹：</p><pre class="line-numbers language-none"><code class="language-none">bfg --delete-folders walterlv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此命令可以与上面的 <code>--delete-files</code> 放在一起执行：</p><pre class="line-numbers language-none"><code class="language-none">bfg --delete-folders walterlv --delete-files walterlv.snk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除敏感的密码信息">删除敏感的密码信息<a href="https://blog.walterlv.com/post/clean-up-git-repo-using-bfg.html#%E5%88%A0%E9%99%A4%E6%95%8F%E6%84%9F%E7%9A%84%E5%AF%86%E7%A0%81%E4%BF%A1%E6%81%AF"></a></h3><pre class="line-numbers language-none"><code class="language-none">bfg --replace-text expression-file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，这里的 expression-file.txt 名称是随便取的，你可以取其他任何名称，只要在命令里输入正确的名称（可能需要包含路径）就行。</p><p>但是 expression-file.txt 里面的内容却是我们需要关注的重点。</p><p>此文件中的每一行是一个匹配表达式。默认情况下，每一个表达式被视为一段文本常量，但你可以通过指定 <code>regex:</code> 前缀来说明此表达式是一个正则表达式，或者指定 <code>glob:</code> 前缀。每一个表达式的后面可以加上 ‘==&gt;’ 来指定匹配的文件应该被替换成什么（如果没有指定，就会被替换成默认值 <code>***REMOVED***</code>。</p><p>下面这个例子示例将 git 仓库中所有文件中的 <code>密码：123456</code> 字符串替换成 <code>***REMOVED***</code>：</p><pre class="line-numbers language-none"><code class="language-none">密码：123456<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更复杂一点的，下面的例子示例将 git 仓库中所有文件中的 <code>密码：123456</code> 字符串替换成 <code>密码：******</code>：</p><pre class="line-numbers language-none"><code class="language-none">密码：123456 &#x3D;&#x3D;&gt; 密码：******<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>还可以使用正则表达式：</p><pre class="line-numbers language-none"><code class="language-none">regex:密码：\d+ &#x3D;&#x3D;&gt; 密码：******<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="推回远端仓库">推回远端仓库<a href="https://blog.walterlv.com/post/clean-up-git-repo-using-bfg.html#%E6%8E%A8%E5%9B%9E%E8%BF%9C%E7%AB%AF%E4%BB%93%E5%BA%93"></a></h2><p>当你在本地操作完镜像仓库之后，可以将其推回原来的远端仓库了。</p><pre class="line-numbers language-none"><code class="language-none">git push<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后，有一个不必要的操作。就是回收已经没有引用的旧提交，这可以减小本地仓库的大小：</p><pre class="line-numbers language-none"><code class="language-none">git reflog expire --expire&#x3D;now --all &amp;&amp; git gc --prune&#x3D;now --aggressive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="附命令行用法输出">附命令行用法输出<a href="https://blog.walterlv.com/post/clean-up-git-repo-using-bfg.html#%E9%99%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%94%A8%E6%B3%95%E8%BE%93%E5%87%BA"></a></h2><p>直接在命令行输入 <code>bfg</code> 可以看 <code>bfg</code> 命令行的用法。我贴在下面可以让还没安装的小伙伴感受一下它的功能：</p><pre class="line-numbers language-none"><code class="language-none">Usage: bfg [options] [&lt;repo&gt;]  -b, --strip-blobs-bigger-than &lt;size&gt;                           strip blobs bigger than X (eg &#39;128K&#39;, &#39;1M&#39;, etc)  -B, --strip-biggest-blobs NUM                           strip the top NUM biggest blobs  -bi, --strip-blobs-with-ids &lt;blob-ids-file&gt;                           strip blobs with the specified Git object ids  -D, --delete-files &lt;glob&gt;                           delete files with the specified names (eg &#39;*.class&#39;, &#39;*.&#123;txt,log&#125;&#39; - matches on file name, not path within repo)  --delete-folders &lt;glob&gt;  delete folders with the specified names (eg &#39;.svn&#39;, &#39;*-tmp&#39; - matches on folder name, not path within repo)  --convert-to-git-lfs &lt;value&gt;                           extract files with the specified names (eg &#39;*.zip&#39; or &#39;*.mp4&#39;) into Git LFS  -rt, --replace-text &lt;expressions-file&gt;                           filter content of files, replacing matched text. Match expressions should be listed in the file, one expression per line - by default, each expression is treated as a literal, but &#39;regex:&#39; &amp; &#39;glob:&#39; prefixes are supported, with &#39;&#x3D;&#x3D;&gt;&#39; to specify a replacement string other than the default of &#39;***REMOVED***&#39;.  -fi, --filter-content-including &lt;glob&gt;                           do file-content filtering on files that match the specified expression (eg &#39;*.&#123;txt,properties&#125;&#39;)  -fe, --filter-content-excluding &lt;glob&gt;                           don&#39;t do file-content filtering on files that match the specified expression (eg &#39;*.&#123;xml,pdf&#125;&#39;)  -fs, --filter-content-size-threshold &lt;size&gt;                           only do file-content filtering on files smaller than &lt;size&gt; (default is 1048576 bytes)  -p, --protect-blobs-from &lt;refs&gt;                           protect blobs that appear in the most recent versions of the specified refs (default is &#39;HEAD&#39;)  --no-blob-protection     allow the BFG to modify even your *latest* commit. Not recommended: you should have already ensured your latest commit is clean.  --private                treat this repo-rewrite as removing private data (for example: omit old commit ids from commit messages)  --massive-non-file-objects-sized-up-to &lt;size&gt;                           increase memory usage to handle over-size Commits, Tags, and Trees that are up to X in size (eg &#39;10M&#39;)  &lt;repo&gt;                   file path for Git repository to clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我觉得你可能需要中文版，于是自己翻译了一下：</p><pre class="line-numbers language-none"><code class="language-none">用法: bfg [options] [&lt;repo&gt;]  -b, --strip-blobs-bigger-than &lt;size&gt;                           移除大于 &lt;size&gt; 大小的文件（&lt;size&gt; 可填写诸如 &#39;128K&#39;、&#39;1M&#39;）  -B, --strip-biggest-blobs NUM                           从大到小移除 NUM 数量的文件  -bi, --strip-blobs-with-ids &lt;blob-ids-file&gt;                           移除具有指定 git 对象 id 的文件  -D, --delete-files &lt;glob&gt;                           移除具有指定名称的文件（例如 &#39;*.class&#39;、&#39;*.&#123;txt,log&#125;&#39;，仅匹配文件名而不能匹配路径）  --delete-folders &lt;glob&gt;  移除具有指定名称的文件夹（例如 &#39;.svn&#39;、&#39;*-tmp&#39;，仅匹配文件夹名而不能匹配路径）  --convert-to-git-lfs &lt;value&gt;                           将指定名称的文件（例如 &#39;*.zip&#39; 或 &#39;*.mp4&#39;）解压到 Git LFS  -rt, --replace-text &lt;expressions-file&gt;                           查找文件内容，并替换其中匹配的文本。&lt;expressions-file&gt; 是一个包含一个或多个匹配表达式的文件，文件中每一行是一个匹配表达式。                           默认情况下，每一个表达式被视为一段文本常量，但你可以通过指定 &#39;regex:&#39; 前缀来说明此表达式是一个正则表达式，或者指定 &#39;glob:&#39; 前缀。                           每一个表达式的后面可以加上 &#39;&#x3D;&#x3D;&gt;&#39; 来指定匹配的文件应该被替换成什么（如果没有指定，就会被替换成默认值 &#39;***REMOVED***&#39;。  -fi, --filter-content-including &lt;glob&gt;                           指定文件名（例如 &#39;*.&#123;txt,properties&#125;&#39;），在进行内容替换的时候只对这些文件进行处理。  -fe, --filter-content-excluding &lt;glob&gt;                           指定文件名（例如 &#39;*.&#123;xml,pdf&#125;&#39;），在进行内容替换的时候不对这些文件进行处理。  -fs, --filter-content-size-threshold &lt;size&gt;                           仅对小于 &lt;size&gt; 指定的大小的文件替换内容。（默认值为 1048576 字节）  -p, --protect-blobs-from &lt;refs&gt;                           protect blobs that appear in the most recent versions of the specified refs (default is &#39;HEAD&#39;)  --no-blob-protection     allow the BFG to modify even your *latest* commit. Not recommended: you should have already ensured your latest commit is clean.  --private                仅将本次操作视为个人数据的修改（这样生成的新提交会使用旧提交的 Id，其他人拉取仓库的时候因为这些 Id 已经存在于是不会更新，以至于此更改实际上只影响自己）。  --massive-non-file-objects-sized-up-to &lt;size&gt;                           increase memory usage to handle over-size Commits, Tags, and Trees that are up to X in size (eg &#39;10M&#39;)  &lt;repo&gt;                   file path for Git repository to clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<br><a href="https://blog.walterlv.com/post/clean-up-git-repo-using-bfg.html">清理 git 仓库太繁琐？试试 bfg！删除敏感信息删除大文件一句命令搞定（比官方文档还详细的使用说明） - walterlv</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Idea Maven 导入项目过慢</title>
      <link href="/20230612112332/"/>
      <url>/20230612112332/</url>
      
        <content type="html"><![CDATA[<h3 id="Xms1024m-Xmx2048m">-Xms1024m -Xmx2048m</h3><p>打开Settings</p><p>修改maven Importing的jvm参数, 默认为700多, 直接修改成 -Xms1024m -Xmx2048m</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//20230612112600.png" alt="" loading="lazy"></p><h3 id="archetypeCatalog-internal">archetypeCatalog = internal</h3><blockquote><p>-DarchetypeCatalog参数是用来指定archetype-catalog.xml文件从哪里获取的。可以选择的值为：remote，internal ，local等，如果不进行设置的话则默认使用remote，而由于远程的中央仓库的archetype太多， 导致从远程网络加载所以非常慢，这也是之前卡在这里的原因。<br>settings设置的是当前项目的配置，如果设置全局的设置，则在other settings进行上述设置，则对其他项目也生效。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//20230612112632.png" alt="" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yourls安装</title>
      <link href="/33621/"/>
      <url>/33621/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要是在官方的docker镜像基础上加上了composer和gd<br>并且将user目录挂载到宿主机上 更方便插件的安装</p></blockquote><p>docker hub<br><a href="https://hub.docker.com/_/yourls/">yourls - Official Image | Docker Hub</a><br>如何安装更多 PHP 扩展<br><a href="https://github.com/docker-library/docs/blob/master/php/README.md#how-to-install-more-php-extensions">docs/README.md at master · docker-library/docs · GitHub</a></p><h3 id="编写Dockerfile-安装composer和gd">编写Dockerfile  安装composer和gd</h3><pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">FROM yourls:latestRUN apt-get update &amp;&amp; apt-get install -y \libfreetype6-dev \libjpeg62-turbo-dev \libpng-dev \git \&amp;&amp; docker-php-ext-configure gd --with-freetype --with-jpeg \&amp;&amp; docker-php-ext-install -j$(nproc) gdRUN curl -sS https:&#x2F;&#x2F;getcomposer.org&#x2F;installer | php -- --install-dir&#x3D;&#x2F;usr&#x2F;local&#x2F;bin --filename&#x3D;composer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构建镜像">构建镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> yourls <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="运行容器">运行容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> yourls <span class="token punctuation">\</span>   <span class="token parameter variable">-e</span> <span class="token assign-left variable">YOURLS_DB_HOST</span><span class="token operator">=</span>数据库地址 <span class="token punctuation">\</span>   <span class="token parameter variable">-e</span> <span class="token assign-left variable">YOURLS_DB_USER</span><span class="token operator">=</span>数据库账号 <span class="token punctuation">\</span>   <span class="token parameter variable">-e</span> <span class="token assign-left variable">YOURLS_DB_PASS</span><span class="token operator">=</span>数据库密码 <span class="token punctuation">\</span>   <span class="token parameter variable">-e</span> <span class="token assign-left variable">YOURLS_SITE</span><span class="token operator">=</span><span class="token string">"你的网站地址"</span> <span class="token punctuation">\</span>   <span class="token parameter variable">-e</span> <span class="token assign-left variable">YOURLS_USER</span><span class="token operator">=</span><span class="token string">"YOURLS用户名"</span> <span class="token punctuation">\</span>   <span class="token parameter variable">-e</span> <span class="token assign-left variable">YOURLS_PASS</span><span class="token operator">=</span><span class="token string">"YOURLS密码"</span> <span class="token punctuation">\</span>   <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token punctuation">\</span>   <span class="token parameter variable">-v</span> /root/yourls:/var/www/html/user <span class="token punctuation">\</span>   <span class="token parameter variable">-d</span> yourls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二维码插件">二维码插件</h3><p><a href="https://github.com/seandrickson/YOURLS-QRCode-Plugin">GitHub - seandrickson/YOURLS-QRCode-Plugin: YOURLS QR Code Plugin – allows you to get the QR code by simply clicking on a button in the Admin area (or by adding “.qr” to the end of the keyword.)</a></p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 短链接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重拾Hexo</title>
      <link href="/35726/"/>
      <url>/35726/</url>
      
        <content type="html"><![CDATA[<h3 id="我做了什么">我做了什么</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 1. 自定义Project页面 实现项目展示</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 2. yourls 短链接服务 和 Plausible + utm 统计网站流量 <strong>跟踪访问来源</strong></li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 3. hexo 创作流程大改造 使用obsidian + hexo + git +CI/CD</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 4. hexo 支持 TaskList</li></ul><h3 id="还要做啥">还要做啥</h3><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 5. 编排目录 自动生成 tag categories</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 6. obsidian 使用插件上传图片时取消插入image name</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> 7. hexo生成永久文章链接🔗</li></ul><h3 id="怎么做的">怎么做的</h3><h4 id="1-自定义Project页面">1. 自定义Project页面</h4><p>修改hexo主题对应的ejs文件，利用自带的categories模块，判断category是否等于Project，再对Project渲染生成不同的html界面。</p><h4 id="3-obsidian写作">3.obsidian写作</h4><ul><li>🧐 git插件使用<ul><li>快捷键<code>Ctrl + P</code>打开命令面板，输入<code>open source control view</code>启用可视化操作面板：</li></ul></li><li>🔧 obsidian调试<ul><li><code>Ctrl+Shift+I</code></li></ul></li><li>显示标题级别<ul><li>安装插件lapel</li></ul></li></ul><h4 id="4-hexo-支持-TaskList">4. hexo 支持 TaskList</h4><blockquote><p>这个还是踩坑了<br>hexo-renderer-marked 改为 hexo-renderer-markdown-it 后<br>安装了 markdown-it-task-lists<br>还是不管用</p></blockquote><h5 id="解决方案">解决方案</h5><p>发现是我的主题引用的<code>materializecss</code> css文件把checkbox的opacity设置为了0，删除该属性后才生效。</p><h4 id="5-自动生成-tag-categories">5.自动生成 tag categories</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Generate categories from directory-tree</span><span class="token comment"># Dependencies: https://github.com/xu-song/hexo-auto-category</span><span class="token comment"># depth: the max_depth of directory-tree you want to generate, should > 0</span><span class="token key atrule">auto_category</span><span class="token punctuation">:</span> <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token key atrule">depth</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment">#目录深度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-obsidian-使用插件上传图片时取消插入图片名">6.obsidian 使用插件上传图片时取消插入图片名</h4><p>看了一下image auto upload Plugin插件的JS代码，发现image name的相关代码，对最后插入md文件时进行了拼接，修改相应代码即可</p><h4 id="7-🔗文章永久链接">7.🔗文章永久链接</h4><p>使用abbrlink生成，但是其原理是直接修改md文件，只要md文件存在abbrlink，这个md文件的abbrlink就不会改变，这个过程是在hexo generate的过程中生成的，我的写作方案<code>obsidian + hexo + git +CI/CD</code>建了三个仓库，<code>post</code>、<code>hexo-baken</code>、<code>izyq.github.io</code>，我的文章是提交到<code>post</code>仓库，然后随着workflows一路到<code>izyq.github.io</code>，abbrlink是在hexo-baken触发时生成的，显然这样的工作流不适合往后保存生成带abbrlink的md文件，所以只能在obsidian生成。</p><h5 id="方案">方案</h5><p>在obsidian中abbrlink使用YYYYMMDDhhmmss这样的时间格式，在模版中修改</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全国双碳数据可视化</title>
      <link href="/20221218023819/"/>
      <url>/20221218023819/</url>
      
        <content type="html"><![CDATA[<h2 id="项目背景">项目背景</h2><p>本作品依托数字化可视平台模式，在“聚力碳中和，实现碳达峰”的双碳战略下，运用大数据、可视化等技术将数字化和双碳有序结合，多方位、多角度、全景展现不同地域、不同时间、多种联系的碳排放情况及各种指标，利用监控大屏直观监控数据变化。</p><h2 id="项目展示">项目展示</h2><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//202307101501460.png" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//202307101508868.png" alt="" loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//202307101509038.png" alt="" loading="lazy"></p><h3 id="全国碳排放地图">全国碳排放地图</h3><blockquote><p>以地图+时间轴形式区分我国不同时间、不同地区碳排放总量情况，并根据排放量级差异化显示。同时支持<strong>地图下钻功能</strong>，点击地图里的相应省份，即可查看各省下辖市的详细排放数据。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//202307101502976.png" alt="" loading="lazy"></p><h3 id="能源消费比重">能源消费比重</h3><blockquote><p>统计我国航空业、交通运输、工业生产、政府部门、房地产业等我国几大重点碳排领域相关数据，以饼图形式动态呈现，可以选择不同领域查看其占比及详细碳排情况。（展示加入工业生产结果）</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//202307101505031.png" alt="" loading="lazy"></p><h2 id="方案设计">方案设计</h2><h3 id="整体架构">整体架构</h3><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//202307101446974.png" alt="" loading="lazy"></p><h2 id="数据处理">数据处理</h2><h4 id="1-导入数据及描述统计">1. 导入数据及描述统计</h4><p>利用pandas库将网站获取到的各类数据读入，并对数据结构、有效性进行分析，为下一步数据清洗做准备。</p><h4 id="2-数据清洗">2. 数据清洗</h4><p>利用numpy、pandas库提供的函数及正则表达式等方法对文件中缺失的数据滤除、填充；对重复数据移除或转换；将现有数据计算清洗获得未提供的数据。</p><h4 id="3-绘图和可视化">3. 绘图和可视化</h4><p>利用matplotlib、pyecharts库,选择合适的表现形式，将处理好的数据以可视化形式展现出来。</p><h3 id="模块划分">模块划分</h3><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//202307101441827.png" alt="" loading="lazy"></p><h2 id="数据来源">数据来源</h2><h3 id="font-color-4f81bd-中国碳核算数据库-font"><font color="#4f81bd">中国碳核算数据库</font></h3><blockquote><p>提供中国及全球其他发展中经济体多尺度能源、排放及社会经济清单。</p></blockquote><p>链接🔗：<a href="https://www.ceads.net.cn/">CEADs 中国碳核算数据库</a></p><h3 id="font-color-4f81bd-和鲸社区碳排放数据集-font"><font color="#4f81bd">和鲸社区碳排放数据集</font></h3><blockquote><p>提供世界各国、中国个省份碳排放量、碳交易数据</p></blockquote><p>链接🔗：<a href="https://www.heywhale.com/home/dataset">数据集 - Heywhale.com</a></p><h3 id="font-color-4f81bd-全球实时碳数据-font"><font color="#4f81bd">全球实时碳数据</font></h3><blockquote><p>Carbon Monitor 是一个随时更新的实时数据集，碳监测数据通过公平使用开放数据政策免费提供给公众。</p></blockquote><p>链接🔗：<a href="https://carbonmonitor.org.cn/">全球实时碳数据 Carbon Monitor</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BaseMapper和IService</title>
      <link href="/20221004112131/"/>
      <url>/20221004112131/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis-plus简记">Mybatis-plus简记</h2><p>MybatisPlus提供了两套模板，一个是BaseMapper的通用Mapper级别–<strong>对单表的增删查改</strong>，mapper存在的意义就是可以直接被调用操作数据表<br>还有通用的Service<strong>接口</strong>–IService。</p><table><thead><tr><th></th><th>Mapper</th><th>IService</th></tr></thead><tbody><tr><td>查</td><td>select</td><td>get，list</td></tr><tr><td>删</td><td>delect</td><td>remove</td></tr><tr><td>增</td><td>save(有id)，saveOrUpdate（没id）</td><td>insert</td></tr><tr><td>改</td><td>update</td><td>update</td></tr></tbody></table><p>注意，<strong>IService是 接口！接口！接口！</strong><br>什么是接口？接口是用来实现后完成一些功能的。所以和mapper在流程上比较，多了一个实现的步骤<br>ServiceImpl是IService对应的实现类<br>IServive的泛型是当前操作的实体类对象<br>ServiceImpl实现类的泛型有俩：&lt;自己写的mapper，当前实体类对象&gt;<br>通常来讲，只用单表的增删查改不能满足业务逻辑，所以我们使用mp时，需要创建出自己的接口，让它既可以拥有BaseMapper的简单增删查改，又可以使用IService的方法<br><strong>总结：BaseMapper和IService的存在使得整个业务流程存在更多的改造可能。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//202307202322991.png" alt="" loading="lazy"></p><p>代码：<br>1、自定义接口 MyService ,继承IService通用接口。这样可以使用通用的接口方法<br>public interface <strong>MyService</strong> extends <strong>IService</strong>{<br>}<br>2、实现自定义的接口<br>public class <strong>MyServiceImpl</strong> implements <strong>MyService <strong>{<br>}<br>3、由于MyService继承了IService，所以实现的时候 Myservice需要实现IService的所有方法。所以直接继承</strong>ServiceImpl</strong>，等价于实现IService所有方法<br>public class MyServiceImpl extends <strong>ServiceImpl</strong>&lt;<strong>MyMapper</strong>,<strong>实体类</strong>&gt; implements <strong>MyService</strong> {<br>}</p><p>4、自定义实体类<br>public class <strong>MyMapper</strong> extends** BaseMapper**&lt;<strong>实体类</strong>&gt; {</p><p>}</p><p>参考链接🔗：<a href="https://www.cnblogs.com/Timeouting-Study/p/16480668.html">https://www.cnblogs.com/Timeouting-Study/p/16480668.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MybatisPlus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java对象为啥要实现Serializable接口？</title>
      <link href="/20221001105343/"/>
      <url>/20221001105343/</url>
      
        <content type="html"><![CDATA[<p><strong>导读</strong></p><p>最近这段时间一直在忙着编写Java业务代码，麻木地搬着Ctrl-C、Ctrl-V的砖，在不知道重复了多少次定义Java实体对象时“implements Serializable”的C/V大法后，脑海中突然冒出一个思维(A)：问了自己一句“Java实体对象为什么一定要实现Serializable接口呢?”，关于这个问题，脑海中的另一个思维(B)立马给出了回复“居然问这么幼稚和基础的问题，实现Serilizable接口是为了序列化啊!”，思维(A)：“哦，好吧!然而，然后呢?”<br>此时思维(B)陷入了沉默，突然感觉自己有点浅薄了，好像写了这么多年Java还真是没有太关注过Serializable这个接口!为什么一定要实现Serializable接口?它的底层原理是什么?为什么一定要序列化，序列化又是什么?关于这些问题，不知道各位读者朋友有没有过类似的问题，如果有那么我们就在这篇文章中一起寻找答案吧!当然，如果你对这些问题都很清楚，也欢迎表达看法!<br><strong>Serializable接口概述</strong></p><p>Serializable是java.io包中定义的、用于实现Java类的序列化操作而提供的一个语义级别的接口。Serializable序列化接口没有任何方法或者字段，只是用于标识可序列化的语义。实现了Serializable接口的类可以被ObjectOutputStream转换为字节流，同时也可以通过ObjectInputStream再将其解析为对象。例如，我们可以将序列化对象写入文件后，再次从文件中读取它并反序列化成对象，也就是说，可以使用表示对象及其数据的类型信息和字节在内存中重新创建对象。<br>而这一点对于面向对象的编程语言来说是非常重要的，因为无论什么编程语言，其底层涉及IO操作的部分还是由操作系统其帮其完成的，而底层IO操作都是以字节流的方式进行的，所以写操作都涉及将编程语言数据类型转换为字节流，而读操作则又涉及将字节流转化为编程语言类型的特定数据类型。而Java作为一门面向对象的编程语言，对象作为其主要数据的类型载体，为了完成对象数据的读写操作，也就需要一种方式来让JVM知道在进行IO操作时如何将对象数据转换为字节流，以及如何将字节流数据转换为特定的对象，而Serializable接口就承担了这样一个角色。<br>下面我们可以通过例子来实现将序列化的对象存储到文件，然后再将其从文件中反序列化为对象，代码示例如下：<br>先定义一个序列化对象User：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> userId<span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">String</span> userName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>userId <span class="token operator">=</span> userId<span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>userName <span class="token operator">=</span> userName<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们编写测试类，来对该对象进行读写操作，我们先测试将该对象写入一个文件：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializableTest</span> <span class="token punctuation">&#123;</span>      <span class="token comment">/**      * 将User对象作为文本写入磁盘      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"1001"</span><span class="token punctuation">,</span> <span class="token string">"Joe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>             <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/guanliyuan/user.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>             objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">writeObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行上述代码，我们就将User对象及其携带的数据写入了文本user.txt中，我们可以看下user.txt中存储的数据此时是个什么格式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>NotSerializableException</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>wudimanong<span class="token punctuation">.</span>serializable<span class="token punctuation">.</span></span>User</span>     at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectOutputStream</span><span class="token punctuation">.</span><span class="token function">writeObject0</span><span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1184</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectOutputStream</span><span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">348</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>wudimanong<span class="token punctuation">.</span>serializable<span class="token punctuation">.</span></span>SerializableTest</span><span class="token punctuation">.</span><span class="token function">writeObj</span><span class="token punctuation">(</span><span class="token class-name">SerializableTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">19</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>wudimanong<span class="token punctuation">.</span>serializable<span class="token punctuation">.</span></span>SerializableTest</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">SerializableTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">27</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们看到对象数据以二进制文本的方式被持久化到了磁盘文件中。在进行反序列化测试之前，我们可以尝试下将User实现Serializable接口的代码部分去掉，看看此时写操作是否还能成功，结果如下：<br>结果不出所料，果然是不可以的，抛出了NotSerializableException异常，提示非可序列化异常，也就是说没有实现Serializable接口的对象是无法通过IO操作持久化的。<br>接下来，我们继续编写测试代码，尝试将之前持久化写入user.txt文件的对象数据再次转化为Java对象，代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializableTest</span> <span class="token punctuation">&#123;</span>     <span class="token comment">/**      * 将类从文本中提取并赋值给内存中的类      */</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">readObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>             <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/guanliyuan/user.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 <span class="token class-name">Object</span> object <span class="token operator">=</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> object<span class="token punctuation">;</span>                 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token function">readObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过反序列化操作，可以再次将持久化的对象字节流数据通过IO转化为Java对象，结果如下：<br><code>cn.wudimanong.serializable.User@6f496d9f </code><br>此时，如果我们再次尝试将User实现Serializable接口的代码部分去掉，发现也无法再文本转换为序列化对象，报错信息为：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>InvalidClassException</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>wudimanong<span class="token punctuation">.</span>serializable<span class="token punctuation">.</span></span>User</span><span class="token punctuation">;</span> <span class="token keyword">class</span> invalid <span class="token keyword">for</span> deserialization     at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectStreamClass</span>$<span class="token class-name">ExceptionInfo</span><span class="token punctuation">.</span><span class="token function">newInvalidClassException</span><span class="token punctuation">(</span><span class="token class-name">ObjectStreamClass</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">157</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectStreamClass</span><span class="token punctuation">.</span><span class="token function">checkDeserialize</span><span class="token punctuation">(</span><span class="token class-name">ObjectStreamClass</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">862</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span><span class="token punctuation">.</span><span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2038</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span><span class="token punctuation">.</span><span class="token function">readObject0</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1568</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span><span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">428</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>wudimanong<span class="token punctuation">.</span>serializable<span class="token punctuation">.</span></span>SerializableTest</span><span class="token punctuation">.</span><span class="token function">readObj</span><span class="token punctuation">(</span><span class="token class-name">SerializableTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">31</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>wudimanong<span class="token punctuation">.</span>serializable<span class="token punctuation">.</span></span>SerializableTest</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">SerializableTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">44</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提示非法类型转换异常，说明在Java中如何要实现对象的IO读写操作，都必须实现Serializable接口，否则代码就会报错!<br><strong>序列化&amp;反序列化</strong></p><p>通过上面的阐述和示例，相信大家对Serializable接口的作用是有了比较具体的体会了，接下来我们上层到理论层面，看下到底什么是序列化/反序列化。序列化是指把对象转换为字节序列的过程，我们称之为对象的序列化，就是把内存中的这些对象变成一连串的字节(bytes)描述的过程。<br>而反序列化则相反，就是把持久化的字节文件数据恢复为对象的过程。那么什么情况下需要序列化呢?大概有这样两类比较常见的场景：1)、需要把内存中的对象状态数据保存到一个文件或者数据库中的时候，这个场景是比较常见的，例如我们利用mybatis框架编写持久层insert对象数据到数据库中时;2)、网络通信时需要用套接字在网络中传送对象时，如我们使用RPC协议进行网络通信时;<br><strong>关于serialVersionUID</strong></p><p>对于JVM来说，要进行持久化的类必须要有一个标记，只有持有这个标记JVM才允许类创建的对象可以通过其IO系统转换为字节数据，从而实现持久化，而这个标记就是Serializable接口。而在反序列化的过程中则需要使用serialVersionUID来确定由那个类来加载这个对象，所以我们在实现Serializable接口的时候，一般还会要去尽量显示地定义serialVersionUID，如：<br><code>private static final long serialVersionUID = 1L; </code><br>在反序列化的过程中，如果接收方为对象加载了一个类，如果该对象的serialVersionUID与对应持久化时的类不同，那么反序列化的过程中将会导致InvalidClassException异常。例如，在之前反序列化的例子中，我们故意将User类的serialVersionUID改为2L，如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>InvalidClassException</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>wudimanong<span class="token punctuation">.</span>serializable<span class="token punctuation">.</span></span>User</span><span class="token punctuation">;</span> local <span class="token keyword">class</span> incompatible<span class="token operator">:</span> stream classdesc serialVersionUID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> local <span class="token keyword">class</span> serialVersionUID <span class="token operator">=</span> <span class="token number">2</span>     at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectStreamClass</span><span class="token punctuation">.</span><span class="token function">initNonProxy</span><span class="token punctuation">(</span><span class="token class-name">ObjectStreamClass</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">687</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span><span class="token punctuation">.</span><span class="token function">readNonProxyDesc</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1880</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span><span class="token punctuation">.</span><span class="token function">readClassDesc</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1746</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span><span class="token punctuation">.</span><span class="token function">readOrdinaryObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2037</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span><span class="token punctuation">.</span><span class="token function">readObject0</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1568</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>ObjectInputStream</span><span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token class-name">ObjectInputStream</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">428</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>wudimanong<span class="token punctuation">.</span>serializable<span class="token punctuation">.</span></span>SerializableTest</span><span class="token punctuation">.</span><span class="token function">readObj</span><span class="token punctuation">(</span><span class="token class-name">SerializableTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">31</span><span class="token punctuation">)</span>     at <span class="token class-name"><span class="token namespace">cn<span class="token punctuation">.</span>wudimanong<span class="token punctuation">.</span>serializable<span class="token punctuation">.</span></span>SerializableTest</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">SerializableTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">44</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们在序列化中没有显示地声明serialVersionUID，则序列化运行时将会根据该类的各个方面计算该类默认的serialVersionUID值。但是，Java官方强烈建议所有要序列化的类都显示地声明serialVersionUID字段，因为如果高度依赖于JVM默认生成serialVersionUID，可能会导致其与编译器的实现细节耦合，这样可能会导致在反序列化的过程中发生意外的InvalidClassException异常。因此，为了保证跨不同Java编译器实现的serialVersionUID值的一致，实现Serializable接口的必须显示地声明serialVersionUID字段。<br>此外serialVersionUID字段地声明要尽可能使用private关键字修饰，这是因为该字段的声明只适用于声明的类，该字段作为成员变量被子类继承是没有用处的!有个特殊的地方需要注意的是，数组类是不能显示地声明serialVersionUID的，因为它们始终具有默认计算的值，不过数组类反序列化过程中也是放弃了匹配serialVersionUID值的要求。<br>参考资料：<br><a href="https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html?is-external=true">https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html?is-external=true</a><br><a href="http://www.tutorialspoint.com/java/java_serialization.htm">http://www.tutorialspoint.com/java/java_serialization.htm</a><br><a href="https://www.51cto.com/article/596334.html">https://www.51cto.com/article/596334.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot 后端统一返回数据格式，异常统一处理（全局异常处理器）</title>
      <link href="/20220927111806/"/>
      <url>/20220927111806/</url>
      
        <content type="html"><![CDATA[<h1>springboot 后端统一返回数据格式，异常统一处理</h1><h2 id="模板">模板</h2><h2 id="场景：">场景：</h2><ul><li>后端给前端的数据类型可能会是基本数据类型、String字符串、对象、数组、或者异常提示等。前端拿到你返回的数据去展示或者给出错误提示，但他不可能说每个接口都把这些异常提示处理一遍，比如说返回没有登录、或者一些业务异常等。</li></ul><h2 id="分析：">分析：</h2><ul><li>基于上面场景，那么我们要做的就是在后端返回结果前做一层统一处理。返回一个统一的对象，如ResponseVO，有code、msg、data；前端根据返回的code做统一处理<ul><li>code=0，返回成功，返回数据在data上</li><li>code=1或其他，后端异常返回，可能是业务异常，也可能是程序异常，错误信息放在msg上</li></ul></li><li>如果未登入，后端返回403，这时候前端在调用后端接口返回那里根据错误码去做统一的处理，统一提示或其他。成功的话就把返回的数据data给对应调用方法那里。</li></ul><h2 id="实现：">实现：</h2><h3 id="初级版，我们返回一个map，然后通过map把code、msg、data-放进去">初级版，我们返回一个map，然后通过map把code、msg、data 放进去</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> map<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回结果：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/22938993/1664266413210-39dfa412-3739-4a7e-b438-93d35edea00c.png#clientId=u2b011796-65b5-4&amp;from=paste&amp;height=99&amp;id=u1aaccbce&amp;originHeight=197&amp;originWidth=512&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14383&amp;status=done&amp;style=none&amp;taskId=u59e8dc8a-219c-42d2-80f3-5b22ff2eaf1&amp;title=&amp;width=256" alt="" loading="lazy"></p><ul><li>上面图片我们可以看到，满足了我们的需求，返回了code、msg、还有我们的数据data。</li><li>但是问题来了，我们每个方法都要写一遍map，把这些数据放进去是不是很麻烦呢，在上面花这么多时间去写这个还怎么摸鱼呢，因此我们小小的优化一下就有了我们的进阶版</li></ul><h3 id="进阶版，统一封装：定义一个统一的返回对象ResponseVO-，在ResponseVO-里写成功和失败的方法">进阶版，统一封装：定义一个统一的返回对象ResponseVO ，在ResponseVO 里写成功和失败的方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseVO</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span><span class="token comment">/**    * 响应状态码，0-成功，非0-失败    */</span>   <span class="token keyword">private</span> <span class="token class-name">Integer</span> code <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">/**    * 返回结果说明    */</span>   <span class="token keyword">private</span> <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">"成功"</span><span class="token punctuation">;</span>   <span class="token comment">/**    * JSON格式响应数据：实体类数据    */</span>   <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>   <span class="token comment">/**    * 返回成功    * @param data    * @return    */</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ResponseVO</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">Object</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token class-name">ResponseVO</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   response<span class="token punctuation">.</span><span class="token function">setMsg</span><span class="token punctuation">(</span><span class="token string">"成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   response<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> response<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>这时候在controller调用就变成了下面这样，是不是简洁多了呢</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ResponseVO</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">ResponseVO</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"测试1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>现在虽然简洁多了，但是还是在每个方法上都要写ResponseVO.success(）或者ResponseVO.fail()，而且每个方法的返回值都变成了ResponseVO，我们都不知道他们的意义了，那有没有统一处理的呢，就是我该返回啥就返回啥，controller层不用关心这些？答案当然是有的，因此就有了下面的最终版方案。</li></ul><h3 id="最终版，ResponseBodyAdvice">最终版，ResponseBodyAdvice</h3><ul><li>接下来就要用到ResponseBodyAdvice，从字面意思理解它的意思就是返回体<strong>切面</strong>，就是对Controller返回的数据进行统一处理，因此我们只要实现这个接口，在上面做统一处理即可，他有两个接口，我们只需在beforeBodyWrite方法处理就可以了，唯一要注意的就是当返回String类型时要特殊处理，不然会报转换错误。统一封装后就不用去关心返回类型了。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">ResponseHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> converterType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span><span class="token class-name">Object</span> body<span class="token punctuation">,</span> <span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">MediaType</span> selectedContentType<span class="token punctuation">,</span>                                      <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> selectedConverterType<span class="token punctuation">,</span> <span class="token class-name">ServerHttpRequest</span> request<span class="token punctuation">,</span>                                      <span class="token class-name">ServerHttpResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ResponseVO</span> respVo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">ResponseVO</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                respVo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ResponseVO</span><span class="token punctuation">)</span> body<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                respVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                respVo<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//如果返回的字符串类型，会先判断HttpMessageConverter能否支持对应的返回类型再使用ResponseBodyAdvice进行封装</span>            <span class="token comment">//那么此时在进来就不是String类型，所以会报无法转换成ResponseVO对象,那么这里有两种方法，一种是直接返回json字符串，另一种是</span>            <span class="token comment">//一种是自己的WebConfig进行额外的配置</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>respVo<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> respVo<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="问题1、假如有个接口特殊，不需要这个返回这个格式怎么办呢？">问题1、假如有个接口特殊，不需要这个返回这个格式怎么办呢？</h3><ul><li>我们可以用到ResponseBodyAdvice接口的另一个方法，让你的方法返回值不走这个统一返回格式处理，最好的方式就是定一个注解，在需要忽略的方法上加上这个注解，实现方式如下</li></ul><ol><li>定义注解IgnoreResponseHandler</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">IgnoreResponseHandler</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在ResponseBodyAdvice的supports方法忽略</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">Log</span> log <span class="token operator">=</span> <span class="token class-name">LogFactory</span><span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token class-name">ResponseHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">MethodParameter</span> returnType<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> converterType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">!</span>returnType<span class="token punctuation">.</span><span class="token function">hasMethodAnnotation</span><span class="token punctuation">(</span><span class="token class-name">IgnoreResponseHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用，返回结果，这样就忽略掉了</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test5"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@IgnoreResponseHandler</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token string">"测试1"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原文链接：<a href="https://www.cnblogs.com/ds521/p/16262706.html">https://www.cnblogs.com/ds521/p/16262706.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Swagger注解</title>
      <link href="/20220628111124/"/>
      <url>/20220628111124/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/jiangyu1013/article/details/83107255">https://blog.csdn.net/jiangyu1013/article/details/83107255</a><br><a href="https://www.cnblogs.com/h-c-g/p/11004020.html">https://www.cnblogs.com/h-c-g/p/11004020.html</a></p><h3 id="Swagger2-JSON入参使用Map、JSONObject等非实体类接收时的处理">Swagger2 JSON入参使用Map、JSONObject等非实体类接收时的处理</h3><p><a href="https://blog.csdn.net/x11819130/article/details/111608470">https://blog.csdn.net/x11819130/article/details/111608470</a><br>knife4j官方文档：<br>动态请求参数添加文档注释<br><a href="https://doc.xiaominfo.com/knife4j/documentation/dynamicRequestDescription.html">https://doc.xiaominfo.com/knife4j/documentation/dynamicRequestDescription.html</a></p><blockquote><p>需要不显示param为参数时可以使用@ApiIgnore注解</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@AutoLog</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"web首页-地图显示按行政区划"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"web首页-地图显示按行政区划"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ApiImplicitParams</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"orgType"</span><span class="token punctuation">,</span>value <span class="token operator">=</span><span class="token string">"行政等级"</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span><span class="token string">"String"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>paramType <span class="token operator">=</span> <span class="token string">"header"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"X-Access-Token"</span><span class="token punctuation">,</span>value <span class="token operator">=</span><span class="token string">"token标记"</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span><span class="token string">"String"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"firstFacilitiesId"</span><span class="token punctuation">,</span>value <span class="token operator">=</span><span class="token string">"一级设施id"</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span><span class="token string">"String"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>value <span class="token operator">=</span><span class="token string">"区域id"</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span><span class="token string">"String"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"leftLongitude"</span><span class="token punctuation">,</span>value <span class="token operator">=</span><span class="token string">"地图左下经度"</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span><span class="token string">"decimal"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"leftLatitude"</span><span class="token punctuation">,</span>value <span class="token operator">=</span><span class="token string">"地图左下纬度"</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span><span class="token string">"decimal"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"rightLongitude"</span><span class="token punctuation">,</span>value <span class="token operator">=</span><span class="token string">"地图右上经度"</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span><span class="token string">"decimal"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>paramType <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">"rightLatitude"</span><span class="token punctuation">,</span>value <span class="token operator">=</span><span class="token string">"地图右上纬度"</span><span class="token punctuation">,</span>dataType <span class="token operator">=</span><span class="token string">"decimal"</span><span class="token punctuation">)</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/circleCountByOrgType"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Result</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">circleCountByOrgType</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@ApiIgnore</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">Map</span> param<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Result</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>mapList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>@ApiImplicitParam：<br>作用在方法上，表示单独的请求参数<br>参数：</p><ol><li>name ：参数名。</li><li>value ： 参数的具体意义，作用。</li><li>required ： 参数是否必填。</li><li>dataType ：参数的数据类型。</li><li>paramType ：查询参数类型，这里有几种形式：<ul><li>paramType 类型 作用<ol><li>path 以地址的形式提交数据</li><li>query 直接跟参数完成自动映射赋值</li><li>body 以流的形式提交 仅支持POST</li><li>header 参数在request headers 里边提交</li><li>form 以form表单的形式提交 仅支持POST</li></ol></li></ul></li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//202307202311456.png" alt="" loading="lazy"></p><p>@ApiImplicitParams：<br>用于方法，包含多个 @ApiImplicitParam：<br>例：<br>@ApiOperation(“查询测试”)<br>@GetMapping(“select”)<br>//@ApiImplicitParam(name=“name”,value=“用户名”,dataType=“String”, paramType = “query”)<br>@ApiImplicitParams({<br>@ApiImplicitParam(name=“name”,value=“用户名”,dataType=“string”, paramType = “query”,example=“xingguo”),<br>@ApiImplicitParam(name=“id”,value=“用户id”,dataType=“long”, paramType = “query”)})<br>public void select(){<br>}</p><p>其他注解：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Api</span>：用在请求的类上，表示对类的说明tags<span class="token operator">=</span><span class="token string">"说明该类的作用，可以在UI界面上看到的注解"</span>    value<span class="token operator">=</span><span class="token string">"该参数没什么意义，在UI界面上也看到，所以不需要配置"</span>            <span class="token annotation punctuation">@ApiOperation</span>：用在请求的方法上，说明方法的用途、作用    value<span class="token operator">=</span><span class="token string">"说明方法的用途、作用"</span>    notes<span class="token operator">=</span><span class="token string">"方法的备注说明"</span>            <span class="token annotation punctuation">@ApiImplicitParams</span>：用在请求的方法上，表示一组参数说明    <span class="token annotation punctuation">@ApiImplicitParam</span>：用在<span class="token annotation punctuation">@ApiImplicitParams</span>注解中，指定一个请求参数的各个方面    name：参数名    value：参数的汉字说明、解释    required：参数是否必须传    paramType：参数放在哪个地方    · header <span class="token operator">--</span><span class="token operator">></span> 请求参数的获取：<span class="token annotation punctuation">@RequestHeader</span>    · query <span class="token operator">--</span><span class="token operator">></span> 请求参数的获取：<span class="token annotation punctuation">@RequestParam</span>    · path（用于restful接口）<span class="token operator">--</span><span class="token operator">></span> 请求参数的获取：<span class="token annotation punctuation">@PathVariable</span>    · body（不常用）    · form（不常用）        dataType：参数类型，默认<span class="token class-name">String</span>，其它值dataType<span class="token operator">=</span><span class="token string">"Integer"</span>           defaultValue：参数的默认值            <span class="token annotation punctuation">@ApiResponses</span>：用在请求的方法上，表示一组响应    <span class="token annotation punctuation">@ApiResponse</span>：用在<span class="token annotation punctuation">@ApiResponses</span>中，一般用于表达一个错误的响应信息    code：数字，例如<span class="token number">400</span>    message：信息，例如<span class="token string">"请求参数没填好"</span>    response：抛出异常的类            <span class="token annotation punctuation">@ApiModel</span>：用于响应类上，表示一个返回响应数据的信息    （这种一般用在post创建的时候，使用<span class="token annotation punctuation">@RequestBody</span>这样的场景，    请求参数无法使用<span class="token annotation punctuation">@ApiImplicitParam</span>注解进行描述的时候）    <span class="token annotation punctuation">@ApiModelProperty</span>：用在属性上，描述响应类的属性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1、@Api：用在请求的类上，说明该类的作用<br>tags=“说明该类的作用”<br>value=“该参数没什么意义，所以不需要配置”<br>示例：<br>@Api(tags=“APP用户注册Controller”)<br>2、@ApiOperation：用在请求的方法上，说明方法的作用<br>@ApiOperation：“用在请求的方法上，说明方法的作用”<br>value=“说明方法的作用”<br>notes=“方法的备注说明”<br>示例：<br>@ApiOperation(value=“用户注册”,notes=“手机号、密码都是必输项，年龄随边填，但必须是数字”)<br>3、@ApiImplicitParams：用在请求的方法上，包含一组参数说明<br>@ApiImplicitParams：用在请求的方法上，包含一组参数说明<br>@ApiImplicitParam：用在 @ApiImplicitParams 注解中，指定一个请求参数的配置信息<br>name：参数名<br>value：参数的汉字说明、解释<br>required：参数是否必须传<br>paramType：参数放在哪个地方<br>· header --&gt; 请求参数的获取：@RequestHeader<br>· query --&gt; 请求参数的获取：@RequestParam<br>· path（用于restful接口）–&gt; 请求参数的获取：@PathVariable<br>· body（不常用）<br>· form（不常用）<br>dataType：参数类型，默认String，其它值dataType=“Integer”<br>defaultValue：参数的默认值<br>示列：<br>@ApiImplicitParams({    @ApiImplicitParam(name=“mobile”,value=“手机号”,required=true,paramType=“form”),    @ApiImplicitParam(name=“password”,value=“密码”,required=true,paramType=“form”),    @ApiImplicitParam(name=“age”,value=“年龄”,required=true,paramType=“form”,dataType=“Integer”)})<br>4、@ApiResponses：用于请求的方法上，表示一组响应<br>@ApiResponses：用于请求的方法上，表示一组响应<br>@ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息<br>code：数字，例如400<br>message：信息，例如&quot;请求参数没填好&quot;<br>response：抛出异常的类<br>示例：<br>@ApiOperation(value = “select1请求”,notes = “多个参数，多种的查询参数类型”)@ApiResponses({    @ApiResponse(code=400,message=“请求参数没填好”),    @ApiResponse(code=404,message=“请求路径没有或页面跳转路径不对”)})</p><p>5、@ApiModel：用于响应类上，表示一个返回响应数据的信息<br>@ApiModel：用于响应类上，表示一个返回响应数据的信息<br>（这种一般用在post创建的时候，使用@RequestBody这样的场景，<br>请求参数无法使用@ApiImplicitParam注解进行描述的时候）<br>@ApiModelProperty：用在属性上，描述响应类的属性</p><p>示例:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiModel</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiModelProperty</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span>description<span class="token operator">=</span> <span class="token string">"返回响应数据"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestMessage</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"是否成功"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> success<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"返回对象"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Object</span> data<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"错误编号"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> errCode<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"错误信息"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> message<span class="token punctuation">;</span>        <span class="token comment">/* getter/setter */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象存储OSS</title>
      <link href="/20220624110410/"/>
      <url>/20220624110410/</url>
      
        <content type="html"><![CDATA[<h1>OSS</h1><p>pom依赖</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.qcloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cos_api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.6.54<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设计思路">设计思路</h2><h4 id="创建Service包，添加OSSService接口，包含upload方法，">创建Service包，添加OSSService接口，包含upload方法，</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OSSService</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建Impl包，添加OSSServiceIml实现">创建Impl包，添加OSSServiceIml实现</h4><p>其中<code>ossClient</code>为自定义的工具类，实现与OSS的连接，返回一个<code>COSClient</code>对象。<br>下面的代码参考官方文档 流类型（ InputStream 类型）上传，使用的是简单上传，没有使用高级接口。<br>调用高级接口可以再写一个工具类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">OSSService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">ConstantYML</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>ossClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qcloud<span class="token punctuation">.</span>cos<span class="token punctuation">.</span></span><span class="token class-name">COSClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qcloud<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">CosClientException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qcloud<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">CosServiceException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qcloud<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">ObjectMetadata</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qcloud<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">PutObjectRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qcloud<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>model<span class="token punctuation">.</span></span><span class="token class-name">PutObjectResult</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>joda<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">DateTime</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OSSServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OSSService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 调用 COS 接口之前必须保证本进程存在一个 COSClient 实例，如果没有则创建</span>        <span class="token class-name">COSClient</span> cosClient <span class="token operator">=</span> ossClient<span class="token punctuation">.</span><span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 存储桶的命名格式为 BucketName-APPID，此处填写的存储桶名称必须为此格式</span>        <span class="token class-name">String</span> bucketName <span class="token operator">=</span> <span class="token class-name">ConstantYML</span><span class="token punctuation">.</span><span class="token constant">BUCKET_NAME</span> <span class="token punctuation">;</span>        <span class="token comment">//构建日期路径:avatar/2019/02/26/文件名</span>        <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 对象键(Key)是对象在存储桶中的唯一标识。</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> filePath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取上传文件流</span>        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">ObjectMetadata</span> objectMetadata <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 上传的流如果能够获取准确的流长度，则推荐一定填写 content-length</span><span class="token comment">// 如果确实没办法获取到，则下面这行可以省略，但同时高级接口也没办法使用分块上传了</span>        objectMetadata<span class="token punctuation">.</span><span class="token function">setContentLength</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PutObjectRequest</span> putObjectRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PutObjectRequest</span><span class="token punctuation">(</span>bucketName<span class="token punctuation">,</span> key<span class="token punctuation">,</span> inputStream<span class="token punctuation">,</span> objectMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">PutObjectResult</span> putObjectResult <span class="token operator">=</span> cosClient<span class="token punctuation">.</span><span class="token function">putObject</span><span class="token punctuation">(</span>putObjectRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>putObjectResult<span class="token punctuation">.</span><span class="token function">getRequestId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CosServiceException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CosClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token comment">// 确认本进程不再使用 cosClient 实例之后，关闭之</span>        cosClient<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="在utils包中创建工具类ossClient">在utils包中创建工具类ossClient</h4><p>此处注入了application.yml里的配置，通过工具类的ConstantYML实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qcloud<span class="token punctuation">.</span>cos<span class="token punctuation">.</span></span><span class="token class-name">COSClient</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qcloud<span class="token punctuation">.</span>cos<span class="token punctuation">.</span></span><span class="token class-name">ClientConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qcloud<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>auth<span class="token punctuation">.</span></span><span class="token class-name">BasicCOSCredentials</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qcloud<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>auth<span class="token punctuation">.</span></span><span class="token class-name">COSCredentials</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qcloud<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpProtocol</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qcloud<span class="token punctuation">.</span>cos<span class="token punctuation">.</span>region<span class="token punctuation">.</span></span><span class="token class-name">Region</span></span><span class="token punctuation">;</span><span class="token comment">/** * Generate request client tool class */</span><span class="token keyword">public</span>  <span class="token keyword">class</span> ossClient <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">COSClient</span> <span class="token function">getClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1 初始化用户身份信息（secretId, secretKey）。</span>        <span class="token class-name">String</span> secretId <span class="token operator">=</span> <span class="token class-name">ConstantYML</span><span class="token punctuation">.</span><span class="token constant">SECRET_ID</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> secretKey <span class="token operator">=</span> <span class="token class-name">ConstantYML</span><span class="token punctuation">.</span><span class="token constant">SECRET_KEY</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getCosClient</span><span class="token punctuation">(</span>secretId<span class="token punctuation">,</span>secretKey<span class="token punctuation">,</span> <span class="token class-name">ConstantYML</span><span class="token punctuation">.</span><span class="token constant">REGION_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">COSClient</span> <span class="token function">getCosClient</span><span class="token punctuation">(</span><span class="token class-name">String</span> secretId<span class="token punctuation">,</span> <span class="token class-name">String</span> secretKey<span class="token punctuation">,</span> <span class="token class-name">String</span> _region<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 1 初始化用户身份信息（secretId, secretKey）。</span>        <span class="token class-name">COSCredentials</span> cred <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicCOSCredentials</span><span class="token punctuation">(</span>secretId<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2 设置 bucket 的区域, CI 地域的简称请参照 https://cloud.tencent.com/document/product/436/6224</span>        <span class="token comment">// clientConfig 中包含了设置 region, https(默认 https), 超时, 代理等 set 方法, 使用可参见源码或者常见问题 Java SDK 部分。</span>        <span class="token class-name">Region</span> region <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Region</span><span class="token punctuation">(</span>_region<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClientConfig</span> clientConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientConfig</span><span class="token punctuation">(</span>region<span class="token punctuation">)</span><span class="token punctuation">;</span>        clientConfig<span class="token punctuation">.</span><span class="token function">setHttpProtocol</span><span class="token punctuation">(</span><span class="token class-name">HttpProtocol</span><span class="token punctuation">.</span>http<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3 生成 cos 客户端。</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">COSClient</span><span class="token punctuation">(</span>cred<span class="token punctuation">,</span> clientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="工具类ConstantYML">工具类ConstantYML</h4><h5 id="优雅的获取yml的配置信息">优雅的获取yml的配置信息</h5><p>使用了@ConfigurationProperties和InitializingBean接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>utils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span></span><span class="token class-name">InitializingBean</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span></span><span class="token class-name">ConfigurationProperties</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"tencent.oss"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstantYML</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> accessKey<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> secretKey<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> regionName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">SECRET_ID</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">SECRET_KEY</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">REGION_NAME</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">BUCKET_NAME</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token constant">SECRET_ID</span> <span class="token operator">=</span> accessKey<span class="token punctuation">;</span>        <span class="token constant">SECRET_KEY</span> <span class="token operator">=</span> secretKey<span class="token punctuation">;</span>        <span class="token constant">REGION_NAME</span> <span class="token operator">=</span> regionName<span class="token punctuation">;</span>        <span class="token constant">BUCKET_NAME</span> <span class="token operator">=</span> bucketName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最后在Controller包里面实现OSSController">最后在Controller包里面实现OSSController</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">R</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>oss<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">OSSService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Api</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiImplicitParam</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiOperation</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Api</span><span class="token punctuation">(</span><span class="token string">"腾讯云OSS"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@CrossOrigin</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"oss"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OSSController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">OSSService</span> ossService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"文件上传"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"upload"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"file"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"单文件上传"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>dataType<span class="token operator">=</span><span class="token string">"MultipartFile"</span><span class="token punctuation">,</span>            allowMultiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>paramType <span class="token operator">=</span> <span class="token string">"form"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">upload</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> ossService<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> uploadUrl <span class="token operator">=</span> <span class="token string">"https://glxy-1304079174.cos.ap-chongqing.myqcloud.com/"</span> <span class="token operator">+</span> key<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token string">"文件上传成功"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> uploadUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="遇到的问题">遇到的问题</h2><h3 id="Knife4j-3-0-3文件上传不显示上传选择文本域">Knife4j 3.0.3文件上传不显示上传选择文本域</h3><h4 id="解决">解决</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">注意 paramType<span class="token operator">=</span> <span class="token string">"form"</span>        <span class="token annotation punctuation">@ApiImplicitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"file"</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">"单文件上传"</span><span class="token punctuation">,</span>required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>dataType<span class="token operator">=</span><span class="token string">"MultipartFile"</span><span class="token punctuation">,</span>                      allowMultiple <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>paramType <span class="token operator">=</span> <span class="token string">"form"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/analysisGps"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">AjaxResult</span> <span class="token function">analysisGps</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestPart</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="OSS上传文件大小限制">OSS上传文件大小限制</h3><p>Spring Boot修改最大上传文件限制:The field file exceeds its maximum permitted size of 1048576 bytes.SpringBoot做文件上传时出现了The field file exceeds its maximum permitted size of 1048576 bytes.错误，显示文件的大小超出了允许的范围。查看了官方文档，原来Spring Boot工程嵌入的tomcat限制了请求的文件大小，这一点在Spring Boot的官方文档中有说明.</p><h4 id="解决-2">解决</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">spring<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>max<span class="token operator">-</span>file<span class="token operator">-</span>size<span class="token operator">=</span><span class="token number">5</span><span class="token constant">GB</span>spring<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span>max<span class="token operator">-</span>request<span class="token operator">-</span>size<span class="token operator">=</span><span class="token number">5</span><span class="token constant">GB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 对象存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/20220624110402/"/>
      <url>/20220624110402/</url>
      
        <content type="html"><![CDATA[<h2 id="主键策略">主键策略</h2><h3 id="1-数据库自增长序列或字段">1. 数据库自增长序列或字段</h3><p>最常见的方式。利用数据库，全数据库唯一。</p><h4 id="优点：">优点：</h4><p>1）简单，代码方便，性能可以接受。<br>2）数字ID天然排序，对分页或者需要排序的结果很有帮助。</p><h4 id="缺点：">缺点：</h4><p>1）不同数据库语法和实现不同，数据库迁移的时候或多数据库版本支持的时候需要处理。<br>2）在单个数据库或读写分离或一主多从的情况下，只有一个主库可以生成。有单点故障的风险。<br>3）在性能达不到要求的情况下，比较难于扩展。（不适用于海量高并发）<br>4）如果遇见多个系统需要合并或者涉及到数据迁移会相当痛苦。<br>5）分表分库的时候会有麻烦。<br>6）<strong>并非一定连续</strong>，类似MySQL，当生成新ID的事务回滚，那么后续的事务也不会再用这个ID了。这个在性能和连续性的折中。如果为了保证连续，必须要在事务结束后才能生成ID，那性能就会出现问题。<br>7）在<strong>分布式数据库</strong>中，如果采用了自增主键的话，有可能会带来尾部热点。分布式数据库常常使用range的分区方式，<strong>在大量新增记录的时候，IO会集中在一个分区上，造成热点数据。</strong></p><h4 id="优化方案：">优化方案：</h4><p>1）针对主库单点，如果有多个Master库，则每个Master库设置的<strong>起始数字不一样，步长一样</strong>，可以是Master的个数。比如：Master1 生成的是 1，4，7，10，Master2生成的是2,5,8,11 Master3生成的是 3,6,9,12。这样就可以有效生成集群中的唯一ID，也可以大大降低ID生成数据库操作的负载。（可以用redis实现）</p><h3 id="2-Redis生成ID">2. Redis生成ID</h3><p>当使用数据库来生成ID性能不够要求的时候，我们可以尝试使用Redis来生成ID。这主要依赖于Redis是单线程的，所以也可以用生成全局唯一的ID。可以用Redis的原子操作 INCR和INCRBY来实现。<br>可以使用Redis集群来获取更高的吞吐量。假如一个集群中有5台Redis。可以初始化每台Redis的值分别是1,2,3,4,5，然后步长都是5。各个Redis生成的ID为：<br>A：1,6,11,16,21<br>B：2,7,12,17,22<br>C：3,8,13,18,23<br>D：4,9,14,19,24<br>E：5,10,15,20,25<br>这个，随便负载到哪个机确定好，未来很难做修改。但是3-5台服务器基本能够满足器上，都可以获得不同的ID。但是步长和初始值一定需要事先需要了。使用Redis集群也可以方式单点故障的问题。<br>另外，比较适合使用Redis来生成每天从0开始的流水号。比如订单号=日期+当日自增长号。可以每天在Redis中生成一个Key，使用INCR进行累加。</p><p>优点：<br>1）不依赖于数据库，灵活方便，且性能优于数据库。<br>2）数字ID天然排序，对分页或者需要排序的结果很有帮助。<br>缺点：<br>1）如果系统中没有Redis，还需要引入新的组件，增加系统复杂度。<br>2）需要编码和配置的工作量比较大。</p><h3 id="2-UUID">2. UUID</h3><p>常见的方式。可以利用数据库也可以利用程序生成，一般来说全球唯一。UUID是由32个的16进制数字组成，所以每个UUID的长度是128位（16^32 = 2^128）。UUID作为一种广泛使用标准，有多个实现版本，影响它的因素包括时间、网卡MAC地址、自定义Namesapce等等。<br>优点：<br>1）简单，代码方便。<br>2）生成ID性能非常好，基本不会有性能问题。<br>3）全球唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。</p><p>缺点：<br>1）没有<strong>排序</strong>，无法保证趋势递增。<br>2）UUID往往是使用字符串存储，查询的效率比较低。<br>3）存储空间比较大，如果是海量数据库，就需要考虑存储量的问题。<br>4）传输数据量大<br>5）不可读。</p><p>优化<br>1）为了解决UUID不可读，可以使用UUID to Int64的方法。<br>2）为了解决UUID无序的问题，NHibernate在其主键生成方式中提供了Comb算法（combined guid/timestamp）。保留GUID的10个字节，用另6个字节表示GUID生成的时间（DateTime）。</p><h3 id=""></h3><ol start="4"><li>Twitter的snowflake算法<br>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。具体实现的代码可以参看<a href="https://github.com/twitter/snowflake">https://github.com/twitter/snowflake</a>。雪花算法支持的TPS可以达到419万左右（2^22*1000）。<br>雪花算法在工程实现上有单机版本和分布式版本。单机版本如下，分布式版本可以参看美团leaf算法：<a href="https://github.com/Meituan-Dianping/Leaf">https://github.com/Meituan-Dianping/Leaf</a></li></ol><p>参考：<a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p><h2 id="MabatisPlus-实现乐观锁">MabatisPlus 实现乐观锁</h2><p><a href="https://baomidou.com/pages/0d93c0/#optimisticlockerinnerinterceptor">官方文档</a></p><h3 id="踩坑记录">踩坑记录</h3><ul><li>在数据库中添加字段version时，要有默认值</li><li>只有先查询，再更新才会生效</li></ul><h2 id="多条件组合查询带分页">多条件组合查询带分页</h2><h3 id="Mybatis分页配置">Mybatis分页配置</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">package com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>admin_house<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>DbType<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>MybatisPlusInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token keyword">inner</span><span class="token punctuation">.</span>PaginationInnerInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MapperScan<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token variable">@Configuration</span><span class="token variable">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.izyq.admin_house.dao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> class MybatisPlusConfig &#123;    <span class="token comment">/**     * 新的分页插件,一缓和二缓遵循mybatis的规则,需要设置 MybatisConfiguration#useDeprecatedExecutor = false 避免缓存出现问题(该属性会在旧插件移除后一同移除)     */</span>    <span class="token variable">@Bean</span>    <span class="token keyword">public</span> MybatisPlusInterceptor mybatisPlusInterceptor<span class="token punctuation">(</span><span class="token punctuation">)</span> &#123;        MybatisPlusInterceptor interceptor <span class="token operator">=</span> new MybatisPlusInterceptor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        interceptor<span class="token punctuation">.</span>addInnerInterceptor<span class="token punctuation">(</span>new PaginationInnerInterceptor<span class="token punctuation">(</span>DbType<span class="token punctuation">.</span>MYSQL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>把条件值传到接口<ul><li>封装多条件<strong>TeacherQuery</strong></li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>vo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">io<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">ApiModelProperty</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherQuery</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"教师名称,模糊查询"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"头衔 1高级讲师 2首席讲师"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> level<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"查询开始时间"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"2019-01-01 10:10:10"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> begin<span class="token punctuation">;</span><span class="token comment">//注意，这里使用的是String类型，前端传过来的数据无需进行类 型转换</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"查询结束时间"</span><span class="token punctuation">,</span> example <span class="token operator">=</span> <span class="token string">"2019-12-01 10:10:10"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> end<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>多条件组合查询<ul><li>判断条件值是否为空,根据判断值，拼接条件</li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 多条件组合查询带分页    */</span>   <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"讲师多条件组合查询"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"pageTheacherCondition/&#123;current&#125;/&#123;limit&#125;"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">pageTheacherCondition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> current<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> limit<span class="token punctuation">,</span>                                 <span class="token annotation punctuation">@RequestBody</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">TeacherQuery</span> teacherQuery<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//创建Page对象</span>       <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EduTeacher</span><span class="token punctuation">></span></span> pageTeacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//创建条件</span>       <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EduTeacher</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> name <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Integer</span> level <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> begin <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> end <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//多条件组合查询</span>       <span class="token comment">//动态sql</span>       <span class="token comment">//判断条件值是否为空,根据判断值，拼接条件</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           wrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>level <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"level"</span><span class="token punctuation">,</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lever不为null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           wrapper<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">,</span>begin<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           wrapper<span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token string">"gmt_modified"</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EduTeacher</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> eduTeacherService<span class="token punctuation">.</span><span class="token function">page</span><span class="token punctuation">(</span>pageTeacher<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span>page<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">,</span>page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>进一步封装<ul><li>private IEduTeacherService eduTeacherService;<ul><li>eduTeacherService是IEduTeacherService类 我们要在这里面去实现它</li><li>在 IEduTeacherService 中添加方法</li></ul></li></ul></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IEduTeacherService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EduTeacher</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">pageQuery</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EduTeacher</span><span class="token punctuation">></span></span> pageTeacher<span class="token punctuation">,</span> <span class="token class-name">TeacherQuery</span> teacherQuery<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>在EduTeacherServiceImpl中实现</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span>query<span class="token punctuation">.</span></span><span class="token class-name">QueryWrapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>pagination<span class="token punctuation">.</span></span><span class="token class-name">Page</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">EduTeacher</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>entity<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">TeacherQuery</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">EduTeacherMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>izyq<span class="token punctuation">.</span>edu<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">IEduTeacherService</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>extension<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">ServiceImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span></span><span class="token punctuation">;</span><span class="token comment">/** * &lt;p> * 讲师 服务实现类 * &lt;/p> * * @author zyq * @since 2022-05-03 */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EduTeacherServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EduTeacherMapper</span><span class="token punctuation">,</span> <span class="token class-name">EduTeacher</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">IEduTeacherService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pageQuery</span><span class="token punctuation">(</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EduTeacher</span><span class="token punctuation">></span></span> pageParam<span class="token punctuation">,</span> <span class="token class-name">TeacherQuery</span> teacherQuery<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EduTeacher</span><span class="token punctuation">></span></span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> level <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> begin <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> end <span class="token operator">=</span> teacherQuery<span class="token punctuation">.</span><span class="token function">getEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//多条件组合查询</span>        <span class="token comment">//动态sql</span>        <span class="token comment">//判断条件值是否为空,根据判断值，拼接条件</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>teacherQuery <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            baseMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            wrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            wrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"level"</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lever不为null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>begin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            wrapper<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"gmt_create"</span><span class="token punctuation">,</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            wrapper<span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token string">"gmt_modified"</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        baseMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>在Controller中使用</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**    * 多条件组合查询带分页    */</span>   <span class="token annotation punctuation">@ApiOperation</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"讲师多条件组合查询"</span><span class="token punctuation">)</span>   <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"pageTheacherCondition/&#123;current&#125;/&#123;limit&#125;"</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">R</span> <span class="token function">pageTheacherCondition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> current<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> limit<span class="token punctuation">,</span>                                 <span class="token annotation punctuation">@RequestBody</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">TeacherQuery</span> teacherQuery<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//创建Page对象</span>       <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EduTeacher</span><span class="token punctuation">></span></span> pageTeacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>current<span class="token punctuation">,</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span>       eduTeacherService<span class="token punctuation">.</span><span class="token function">pageQuery</span><span class="token punctuation">(</span>pageTeacher<span class="token punctuation">,</span>teacherQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token class-name">R</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">,</span>pageTeacher<span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"item"</span><span class="token punctuation">,</span>pageTeacher<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自动填充">自动填充</h2><h3 id="需求场景">需求场景</h3><p>对数据库中的 CreateTime updateTime 等这类参数进行自动填充</p><h3 id="实现">实现</h3><p>使用MP自动填充插件实现 详情查看MP官方文档<br><a href="https://baomidou.com/pages/4c6bcf/">https://baomidou.com/pages/4c6bcf/</a></p><h1>遇到的问题</h1><h2 id="Json时间格式问题">Json时间格式问题</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#spring.jackson.date-format=yyyy-MM-dd HH:mm:ss</span><span class="token comment">#spring.jackson.time-zone=GMT+8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>不起作用</strong></p><h3 id="解决">解决</h3><p>在时间实体类上加上这句注解<br>@JsonFormat(pattern = “yyyy-MM-dd HH:mm:ss”,timezone = “GMT+8”)</p><h2 id="-2"></h2><h1>Java</h1><h2 id="链式编程">链式编程</h2><p>方法 return this 即可实现</p><h2 id="-3"></h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MP代码生成器</title>
      <link href="/20230503105914/"/>
      <url>/20230503105914/</url>
      
        <content type="html"><![CDATA[<h2 id="问题">问题</h2><p>:::info<br>Knife4j Failed to start bean ‘documentationPluginsBootstrapper’; nested exception is java.lang.NullPointerException<br>:::</p><h3 id="解决">解决</h3><p><a href="https://zhuanlan.zhihu.com/p/447338078">https://zhuanlan.zhihu.com/p/447338078</a><br>如果你在启动项目的时候抛出：Failed to start bean ‘documentationPluginsBootstrapper’; nested exception is java.lang.NullPointerException<br>千万不要慌，那是因为你的 springboot 版本太高，应该是 2.6.x，由于Springfox使用的路径匹配是基于AntPathMatcher，而Spring Boot 2.6.X使用的是PathPatternMatcher，所以将MVC的路径匹配规则改成 AntPathMatcher，在配置文件中加入如下参数即可（如果没有报错，可以跳过这个环节）</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span><span class="token key atrule">mvc</span><span class="token punctuation">:</span><span class="token key atrule">pathmatch</span><span class="token punctuation">:</span><span class="token comment"># Springfox使用的路径匹配是基于AntPathMatcher的，而Spring Boot 2.6.X使用的是PathPatternMatcher</span><span class="token comment"># 所以需要配置此参数</span>      <span class="token key atrule">matching-strategy</span><span class="token punctuation">:</span> ant_path_matcher<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="模版">模版</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">package generator<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token module">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>FastAutoGenerator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token module">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>generator<span class="token punctuation">.</span>config<span class="token punctuation">.</span>DataSourceConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token module">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>ScriptRunner</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token module">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token module">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStreamReader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token module">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token module">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException</span><span class="token punctuation">;</span><span class="token comment">/** * &lt;p> * 快速生成 * &lt;/p> * * @author lanjerry * @since 2021-09-16 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MP</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 数据源配置     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> DataSourceConfig<span class="token punctuation">.</span>Builder DATA_SOURCE_CONFIG <span class="token operator">=</span> <span class="token keyword">new</span> DataSourceConfig            <span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://z.xxx.cn:3309/glxy?serverTimezone=Asia/Shanghai"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"imZyq."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 执行 run     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> throws SQLException <span class="token punctuation">&#123;</span>        FastAutoGenerator<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>DATA_SOURCE_CONFIG<span class="token punctuation">)</span>                <span class="token comment">// 全局配置</span>                <span class="token punctuation">.</span><span class="token function">globalConfig</span><span class="token punctuation">(</span>builder <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    builder<span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"zyq"</span><span class="token punctuation">)</span> <span class="token comment">// 设置作者</span>                            <span class="token punctuation">.</span><span class="token function">enableSwagger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开启 swagger 模式</span>                            <span class="token punctuation">.</span><span class="token function">outputDir</span><span class="token punctuation">(</span><span class="token string">"/Users/izyq/Documents/Code/Java/gulixueyuan/service/edu/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 指定输出目录</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token comment">// 包配置</span>                <span class="token punctuation">.</span><span class="token function">packageConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span>scanner<span class="token punctuation">,</span> builder<span class="token punctuation">)</span> <span class="token operator">-></span> builder<span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"请输入包名"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 策略配置</span>                <span class="token punctuation">.</span><span class="token function">strategyConfig</span><span class="token punctuation">(</span><span class="token punctuation">(</span>scanner<span class="token punctuation">,</span> builder<span class="token punctuation">)</span> <span class="token operator">-></span> builder<span class="token punctuation">.</span><span class="token function">addInclude</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"请输入表名，多个表名用,隔开"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">/*                    模板引擎配置，默认 Velocity 可选模板引擎 Beetl 或 Freemarker                   .templateEngine(new BeetlTemplateEngine())                   .templateEngine(new FreemarkerTemplateEngine())                 */</span>                <span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git学习</title>
      <link href="/3151/"/>
      <url>/3151/</url>
      
        <content type="html"><![CDATA[<h4 id="git-基本命令">git 基本命令</h4><p><code>git init</code> 初始化仓库</p><p><code>git add &lt;filename&gt;</code>  加入暂存区</p><p><code>git add .</code>  将所有文件加入暂存区</p><p><code>git commit -m &lt;messeage&gt; </code> 提交文件到本地仓库 <em>message为对该次提交的描述</em></p><p><code>git reset &lt;filename&gt; </code>  移出暂存区</p><p><code>alias</code> 别名</p><p>git安装目录 <code>gitconfig</code>文件可以设置alias</p><p><code>git reflog</code> 可查看commitID</p><p><code>git checkout -b &lt;name&gt; &lt;template&gt;</code>创建新的分支</p><p><code>&lt;name&gt;</code> 新分支的名字 <code>&lt;template&gt;</code>以哪个分支或者commit为模板</p><p>不填则默认以当前分支为模板</p><p><code>git checkout &lt;branchname&gt;</code>切换到指定分支</p><p><code>git branch</code> 查看所有分支</p><h4 id="git-回滚">git 回滚</h4><p><code>git reset &lt;commitID&gt;</code> 回退</p><p>1.已提交，没有push</p><ul><li><code>git reset --soft</code> 撤销<code>commit</code></li><li><code>git reset --mix</code>撤销commit和add两个动作</li></ul><p>2.已提交，并且push</p><ul><li><code>git reset --hard</code>撤销并舍弃版本号之后的提交记录，文件将还原为所选提交的状态</li><li><code>git revert</code> 文件还原为所选提交状态 本地变更保持不变</li></ul><p>文件状态：<br>1.没有被add过的文件叫untracked<br>2.add之后文件处于staged状态等待commit<br>3.commit之后文件处于unmodified这里之所以是modified是因为文件会跟仓库中的文件对比<br>4.当unmodified的文件被修改则会变为modified状态<br>5.modified之后的文件add之后将继续变为staged状态<br>6.unmodifed的文件还有一种可能是已经不再需要了，那么可以remove它不再追踪变为untracked状态</p><ul class="contains-task-list"><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> git flow工作流</li><li class="task-list-item"><input class="task-list-item-checkbox" checked="" disabled="" type="checkbox"> git rebase  和 merge  （合并和变基）</li></ul><h4 id="gitignore不生效">.gitignore不生效</h4><blockquote><p><strong>原因：</strong><br>1）.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。<br>2）想要.gitignore起作用，必须要在这些文件不在暂存区中才可以，.gitignore文件只是忽略没有被staged(cached)文件，  对于已经被staged文件，加入ignore文件时一定要先从staged移除，才可以忽略。</p></blockquote><h5 id="解决方案">解决方案</h5><p>先把本地缓存删除，然后再进行git的提交</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">rm</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--cached</span> <span class="token builtin class-name">.</span><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">'update .gitignore'</span><span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二种方法（未测试）</strong></p><p>手动设置不要检查特定文件的更改情况。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> update-index --assume-unchanged <span class="token environment constant">PATH</span> //在<span class="token environment constant">PATH</span>处输入要忽略的文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Git中CRLF与LF的转换">Git中CRLF与LF的转换</h4><blockquote><p><a href="https://git-scm.com/docs/gitattributes">Git - gitattributes Documentation</a></p></blockquote><h5 id="通过Git的全局配置进行修改">通过Git的全局配置进行修改</h5><p><em>此种方式修改的是自己电脑的git的全局配置</em></p><ul><li>设置autoclf属性</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 提交时转换为LF，检出时转换为CRLF<span class="token function">git</span> config <span class="token parameter variable">--global</span> core.autocrlf <span class="token boolean">true</span>   // 提交时转换为LF，检出时不转换<span class="token function">git</span> config <span class="token parameter variable">--global</span> core.autocrlf input   // 提交检出均不转换<span class="token function">git</span> config <span class="token parameter variable">--global</span> core.autocrlf <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启safecrlf检查</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 拒绝提交包含混合换行符的文件 （一般设置为true）<span class="token function">git</span> config <span class="token parameter variable">--global</span> core.safecrlf <span class="token boolean">true</span>   // 允许提交包含混合换行符的文件<span class="token function">git</span> config <span class="token parameter variable">--global</span> core.safecrlf <span class="token boolean">false</span>   // 提交包含混合换行符的文件时给出警告<span class="token function">git</span> config <span class="token parameter variable">--global</span> core.safecrlf warn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通过-gitattributes进行修改（更推荐）">通过.gitattributes进行修改（更推荐）</h5><blockquote><p>.gitattributes是针对一个单一的仓库的，也就是说每一个代码仓库都可以包含一个.gitattributes文件。这种方式设置之后，不需要一个项目组里面的同事分别再去修改自己电脑的git的全局配置。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>. <span class="token assign-left variable">text</span><span class="token operator">=</span>auto：采用git认为最好的方式来处理文件，未在.gitattributes中 设置的项默认按照这种方式处理；（If Git decides that the content is text, its line endings are converted to LF on checkin. When the <span class="token function">file</span> has been committed with CRLF, no conversion  is done.）git发现是文本文件,那么在checkin的时候，会将文件结尾符转 换为LF。果文件已经被已CRLF的形式提交（就是说已经在Gti仓库中的文件，如 果结束符是CRLF，不会有任何的转换），不会有任何转换。  <span class="token number">2</span>. <span class="token parameter variable">-text</span> 表示让git在checkin以及checkout的时候，对end-of-line不 做任何转换。  <span class="token number">3</span>. text 表示在checkin的时候会被转换为LF（在repository中的文件结束 符是LF），如果需要控制在checkout的时候的换行符，需要结合eol进行设置 （也就是  控制working tree中的文件的结尾符，需要通过eol设置）。  <span class="token assign-left variable">text</span><span class="token operator">=</span>auto和text的区别在于，text<span class="token operator">=</span>auto由git来确定是不是文本文件， 从而进行转换；而text表示，你确定这个path就是文本文件，会直接对这个 path进行转换，而不是有git来decides是否转换。  <span class="token number">4</span>. 如果没有指定text，git会使用全局配置中的core.autocrlf来进行eol 的转换。core.autocrlf需要自己在自己的电脑上进行配置。 <span class="token number">5</span>. <span class="token assign-left variable">eol</span><span class="token operator">=</span>crlf：对左边匹配的文件统一使用CRLF换行符格式，如果有文件中出现LF将会转换成CRLF<span class="token punctuation">;</span>也就是说，在checkin和checkout的时候，文件中都是CRLF，LF会被转换为CRLF。 <span class="token number">7</span>. <span class="token assign-left variable">eol</span><span class="token operator">=</span>lf：对左边匹配的文件统一使用LF换行符格式，如果有文件中出现CRLF将会转换成LF<span class="token punctuation">;</span>也就是说，在checkin和checkout的时候，文件中都是LF，CRLF会被转换为LF。 <span class="token number">8</span>. binary: 告诉git该文件为二进制，防止git修改该文件。git不会对对其中的换行符进行改变。注意：.gitattributes文件必须要提交之后才能生效。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++基础</title>
      <link href="/44178/"/>
      <url>/44178/</url>
      
        <content type="html"><![CDATA[<h3 id="头文件写法">头文件写法</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#防卫式声明#ifndef _COMPLEX_ &#x2F;&#x2F;如果没有定义这个‘_COMPLEX_’ #define _COMPLEX_ &#x2F;&#x2F;如果没有定义这个‘_COMPLEX_’ ，则定义这个‘_COMPLEX_’&#x2F;&#x2F;第一次include 就会定义这个_COMPLEX_&#x2F;&#x2F;第二次再include时，这个_COMPLEX_被定义过了，不会进入到主体，也就不会重复include······    #endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自己写的头文件用<code>#include “name”</code> 即用双引号引用</p><h3 id="类模板">类模板</h3><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20211103213406959.png" alt="" loading="lazy"></p><p>如果是这样 那么<code>re，im</code>就被写死了，这好吗？这不好。</p><p>如果需要一个float类型或者整型类型的话难到要重新写一个类吗？</p><p>这时候就用到类模板，不把变量类型写死</p><p>所以这样</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20211103214052692.png" alt="" loading="lazy"></p><p>那么我们使用时只需这样</p><p><code>complex&lt;double&gt; c1(2.5,1.5)</code> <code>re，im</code>就是<code>double</code>型</p><p><code>complex&lt;int&gt; c2(2,6)</code> <code>re，im</code>就是<code>int</code>型</p><h3 id="inline（内联）函数">inline（内联）函数</h3><ul><li><p>定义</p><ul><li>定义在class里的函数</li></ul></li><li><p>优点</p><ul><li>速度快</li><li>有宏的特性，没有宏的缺点</li></ul></li><li><p>缺点</p><ul><li>过于复杂的inline func不会被编译器定义成inline</li></ul></li></ul><h3 id="构造函数">构造函数</h3><ul><li>特别之处<ul><li>函数名称和类的名称相同</li><li>没有返回类型，也不需要有</li><li>构造函数就是用来创建对象的</li><li>创建对象时构造函数会被自然而然调用起来</li><li>初值列（见图） 要好好利用 （构造函数的特殊语法）</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20211103221805093.png" alt="" loading="lazy"></p><h3 id="参数传递">参数传递</h3><ul><li>尽量用引用<ul><li>如果不想传进去的参数被修改，加<code>const</code></li></ul></li></ul><h3 id="友元（friends）">友元（friends）</h3><ul><li>友元可以调用Private</li><li>相同的class互为友元</li></ul><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20211103233743036.png" alt="" loading="lazy"></p><p><code>c2</code>通过<code>func</code>直接访问<code>c1</code>的<code>re im</code></p><h3 id="成员函数">成员函数</h3><ul><li>任何一个成员函数都有一个隐藏的this指针</li><li>this指针指向这个调用者 ，即谁调用，指向谁</li></ul>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Padavan常用命令</title>
      <link href="/54362/"/>
      <url>/54362/</url>
      
        <content type="html"><![CDATA[<h2 id="重启服务命令">重启服务命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">restart_dhcpd    restart_firewall  restart_virtualvpn_client restart_wanrestart_dns      restart_networkmap restart_virtualvpn_server2G相关的命令radio2_disable     radio2_enable      radio2_guest_enable  radio2_toggle      radio2_toggle_onradio2_eeprom_mac   radio2_guest_disable radio2_restart     radio2_toggle_off5G相关的命令radio5_disable     radio5_enable      radio5_guest_enable  radio5_toggle      radio5_toggle_onradio5_eeprom_mac   radio5_guest_disable radio5_restart     radio5_toggle_off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配合计划任务，就可以定时重启各种服务了</p><h2 id="NVRAM">NVRAM</h2><p><code>nvram show</code><br>列出 <code>NVRAM</code> 内所有参数，我们亦可以用 <code>grep</code> 命令来筛选</p><p>这命令列出了所以用 <code>lan</code>开头的参数</p><p><code>nvram show | grep lan</code></p><p><code>nvram set</code> 参数=数值</p><p><code>nvram set vpnc_dgw=1</code></p><h2 id="自定义脚本">自定义脚本</h2><h3 id="1-检测全部流量是否走VPN">1.检测全部流量是否走VPN</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token assign-left variable">vpnc_dwg_status</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>nvram get vpnc_dgw<span class="token variable">`</span></span>logger <span class="token parameter variable">-t</span> <span class="token string">"【check_vpn】"</span> <span class="token string">"检测是否全部流量走VPN"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$vpnc_dwg_status</span>"</span> <span class="token operator">==</span> <span class="token string">"1"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>logger <span class="token parameter variable">-t</span> <span class="token string">"【check_vpn】"</span> <span class="token string">"全局流量走VPN"</span><span class="token keyword">else</span>logger <span class="token parameter variable">-t</span> <span class="token string">"【check_vpn】"</span> <span class="token string">"快断网了！自动设置全局流量走VPN"</span>nvram <span class="token builtin class-name">set</span> <span class="token assign-left variable">vpnc_dgw</span><span class="token operator">=</span><span class="token number">1</span>restart_vpn_client<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-检测桥接状态">2.检测桥接状态</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token assign-left variable">ping_text</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ping</span> <span class="token parameter variable">-4</span> <span class="token number">10.0</span>.1.1 <span class="token parameter variable">-c</span> <span class="token number">1</span> <span class="token parameter variable">-w</span> <span class="token number">4</span> <span class="token parameter variable">-q</span><span class="token variable">`</span></span><span class="token assign-left variable">ping_time</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $ping_text <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">'/'</span> <span class="token string">'&#123;print $4&#125;'</span><span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">'.'</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token variable">`</span></span><span class="token assign-left variable">ping_loss</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> $ping_text <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">', '</span> <span class="token string">'&#123;print $3&#125;'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span><span class="token variable">`</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$ping_time</span>"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span><span class="token builtin class-name">echo</span> <span class="token string">"online"</span>logger <span class="token parameter variable">-t</span> <span class="token string">"【wtach_wan】"</span> <span class="token string">"网络连接正常"</span><span class="token keyword">else</span><span class="token builtin class-name">echo</span> <span class="token string">"Internet互联网断线后自动重启WAN"</span>logger <span class="token parameter variable">-t</span> <span class="token string">"【wtach_wan】"</span> <span class="token string">"Internet互联网断线后自动重启WAN"</span>restart_wan<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Padavan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入基础</title>
      <link href="/20316/"/>
      <url>/20316/</url>
      
        <content type="html"><![CDATA[<p>查库 <code>select schema_name from information_schema.schemata</code></p><p>查表 <code>select table_name from information_schema.tables where table_schema=''</code></p><p>查列 <code>select column_name from information_schema.columns where table_name =''</code></p><p>查字段 <code>select username,password from security.users;</code></p><h3 id="LIMIT">LIMIT</h3><p><code>select * from users where id='1' limit 0,1</code>//执行该语句前需要先选择对应的数据库</p><p>limit 0,1 其中 0表示从哪开始，1表示步长</p><h3 id="order">order</h3><p><code>select * from users order by 1</code> //对users这个表中的第一列进行排序，如果不存在这一列则会报错，可以利用这一点获得列数</p><h3 id="union-联合查询">union 联合查询</h3><p>应用场景：<br>要查询的结果来自于多个表，且多个表没有直接的连接关系，但查询的信息一致时</p><p>特点：<br>1、要求多条查询语句的查询<strong>列数是一致的</strong>！<br>2、要求多条查询语句的查询的每一列的类型和顺序最好一致<br>3、union关键字默认去重，如果使用union all 可以包含重复项</p><h4 id="例子">例子</h4><p>对 <code>http://localhost:8888/Less-1/?id=-1' union select 1,2,3--+ </code></p><p>执行的mysql语句为</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT * FROM users WHERE id&#x3D;&#39;-1&#39; union select 1,2,3-- &#39; LIMIT 0,1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="函数">函数</h3><h4 id="group-concat">group_concat()</h4><h4 id="concat-ws-‘-’-A-B">concat_ws(‘~’,A,B)</h4><blockquote><p>注意这里的单引号，我们要尽量避免出现单引号问题，改用十六进制</p></blockquote><p>三个参数分别为 分隔符 数据A 数据B</p><p>最终返回结果为 A~B</p><h4 id="left-a-b">left(a,b)</h4><p>•left(a,b)从左侧截取a的前b位，正确则返回1，错误则返回0</p><p><code>left(database(),1)='s'</code> //第一位是否为s</p><h4 id="regexp">regexp()</h4><p><code>select user() regexp 'r'</code></p><p>结果是r开头的用户名，root等，regexp后面带正则表达式</p><h4 id="like">like()</h4><p><code>select user() like like 'ro%'</code> 此处的作用为匹配 开头为“ro”的用户名</p><h4 id="substr-a-b-c">substr(a,b,c)</h4><p>从位置b开始，截取a字符串c位长度</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select substr((select database()),1,1)&#x3D;&#39;s’; -- 匹配第一个字符是否是 sselect substr((select database()),1,3)&#x3D; ‘sec’; -- 匹配前三个个字符是否是 sec<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="ascii">ascii()</h4><p>将某个字符串转化为ascii值</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础巩固</title>
      <link href="/19628/"/>
      <url>/19628/</url>
      
        <content type="html"><![CDATA[<h3 id="标识符">标识符</h3><ul><li>首字符是字母或下划线</li><li>其余可以是<strong>字母、下划线、数字</strong></li><li>大小写敏感(PI和pi是不同的标识符)</li><li><strong>关键字</strong>  <strong>不</strong>  可作为标识符</li></ul><p>关键字：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> keyword<span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span><span class="token comment">#输出：</span><span class="token punctuation">[</span><span class="token string">'False'</span><span class="token punctuation">,</span> <span class="token string">'None'</span><span class="token punctuation">,</span> <span class="token string">'True'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'as'</span><span class="token punctuation">,</span> <span class="token string">'assert'</span><span class="token punctuation">,</span> <span class="token string">'async'</span><span class="token punctuation">,</span> <span class="token string">'await'</span><span class="token punctuation">,</span> <span class="token string">'break'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'continue'</span><span class="token punctuation">,</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'del'</span><span class="token punctuation">,</span> <span class="token string">'elif'</span><span class="token punctuation">,</span> <span class="token string">'else'</span><span class="token punctuation">,</span> <span class="token string">'except'</span><span class="token punctuation">,</span> <span class="token string">'finally'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'from'</span><span class="token punctuation">,</span> <span class="token string">'global'</span><span class="token punctuation">,</span> <span class="token string">'if'</span><span class="token punctuation">,</span> <span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'lambda'</span><span class="token punctuation">,</span> <span class="token string">'nonlocal'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'pass'</span><span class="token punctuation">,</span> <span class="token string">'raise'</span><span class="token punctuation">,</span> <span class="token string">'return'</span><span class="token punctuation">,</span> <span class="token string">'try'</span><span class="token punctuation">,</span> <span class="token string">'while'</span><span class="token punctuation">,</span> <span class="token string">'with'</span><span class="token punctuation">,</span> <span class="token string">'yield'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表达式">表达式</h3><p>用运算符（<strong>除了赋值运算符</strong>）连接各种类型数据的式子就是表达式</p><ul><li>运算符有优先级顺序</li><li>表达式必须有运算结果</li><li>单个常量或变量可以看作是最简单的表达式 例如：3，‘a’</li></ul><h3 id="数字">数字</h3><ul><li>Python支持任意大的数字，具体可以大到什么程度仅受内存大小的限制。</li><li>由于精度的问题，对于实数运算可能会有一定的误差，<strong>应尽量避免在实数之间直接进行相等性测试</strong>，而是应该以二者之差的绝对值是否<strong>足够小</strong>作为两个实数是否相等的依据。</li><li>在数字的算术运算表达式求值时会进行隐式的类型转换</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0.4</span> <span class="token operator">-</span> <span class="token number">0.1</span> <span class="token operator">==</span> <span class="token number">0.3</span> <span class="token comment">#应尽量避免直接比较两个实数是否相等</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token number">0.4</span><span class="token operator">-</span><span class="token number">0.1</span> <span class="token operator">-</span> <span class="token number">0.3</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1e-6</span> <span class="token comment">#这里1e-6表示10的-6次方</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="切片">切片</h3><p>[N,M] 不包括M</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">k表示步进，缺省为<span class="token number">1</span>当k<span class="token operator">&lt;</span><span class="token number">0</span>时，a<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">]</span>表示从a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>开始<span class="token punctuation">(</span>含a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>到a<span class="token punctuation">[</span>j<span class="token punctuation">]</span>结束<span class="token punctuation">(</span>不含a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>，且顺序是从后向前进行遍历，返回遍历结果。i缺省时，默认为<span class="token operator">-</span><span class="token number">1.</span> j缺省时，默认为<span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>当k<span class="token operator">></span><span class="token number">0</span>时，a<span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">]</span>表示从a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>开始<span class="token punctuation">(</span>含a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>到a<span class="token punctuation">[</span>j<span class="token punctuation">]</span>结束<span class="token punctuation">(</span>不含a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>，且顺序是从前向后进行遍历，返回遍历结果。当i缺省时，默认为<span class="token number">0</span>当j缺省时，默认为<span class="token builtin">len</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span>k的正负值的改变只是改变了遍历的方向而已<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="赋值语句">赋值语句</h3><p><code>a,b = b,a</code> 可以实现a和b的值互换</p><p>同样<code>a,b ,c= c,b,a</code>也是可以的</p><h3 id="Round">Round</h3><p>返回浮点数的四舍五入值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token boolean">False</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20211106221358354.png" alt="" loading="lazy"></p><h3 id="区间">区间</h3><ul><li>range 左开右闭</li></ul><p>字符串 不可变类型</p><p>#考的是多分支情况下，执行第一个满足条件的代码，然后就跳出了，而不会顺序执行后续的每个分支</p><p>惰性求值</p><p>reversed zip map filter enumerate 都具有惰性求值</p><p>strip()函数注意的地方</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token operator">=</span>”<span class="token operator">**</span><span class="token operator">*</span>python<span class="token operator">**</span><span class="token operator">*</span>”<span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span>‘<span class="token operator">*</span>’<span class="token punctuation">)</span>‘python’<span class="token comment">#会把首尾重复的都删除掉</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>理解 append 与 extend 方法的区别</p><p>append 表示把某个数据当作新元素追加到列表的最后面，它的参数可以是<strong>任意对象</strong>：</p><p>extend 的参数必须是<strong>可迭代对象</strong>，表示把该对象里面所有元素<strong>逐个</strong>地追加到列表的后面。</p><h3 id="深拷贝-浅拷贝">深拷贝 浅拷贝</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> copyList <span class="token operator">=</span> <span class="token punctuation">[</span>“张三”<span class="token punctuation">,</span>”李四”<span class="token punctuation">,</span><span class="token punctuation">[</span>”大王五”<span class="token punctuation">,</span>”小王五”<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">#等号：列表对象地址的拷贝，并没有实现拷贝数据</span>List1 <span class="token operator">=</span> List<span class="token comment">#浅拷贝：拷贝最外层的数据，嵌套的结构依然是地址引用</span>List2 <span class="token operator">=</span> List<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#深拷贝：拷贝数据</span>List3<span class="token operator">=</span>copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>List<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>“List<span class="token punctuation">:</span>”<span class="token punctuation">,</span>List<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>“等号<span class="token punctuation">:</span>”<span class="token punctuation">,</span>List1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>“浅拷贝<span class="token punctuation">:</span>”<span class="token punctuation">,</span>List2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>“深拷贝<span class="token punctuation">:</span>”<span class="token punctuation">,</span>List3<span class="token punctuation">)</span>输出结果：List<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'大王五'</span><span class="token punctuation">,</span> <span class="token string">'小王五'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>等号<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'大王五'</span><span class="token punctuation">,</span> <span class="token string">'小王五'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>浅拷贝<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'大王五'</span><span class="token punctuation">,</span> <span class="token string">'小王五'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>深拷贝<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'大王五'</span><span class="token punctuation">,</span> <span class="token string">'小王五'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如何对列表进行排序">如何对列表进行排序</h3><p>列表排序有两种方式，一种是列表自带的方法sort()，注意：sort()是原地操作；一种是内建函数<code>sorted()</code>，<strong>返回新的列表</strong>。复杂的数据类型可通过指定key参数进行排序。</p><p>remove 移除某个元素，而且只能移除第一次出现的元素。</p><p>del关键字 根据指定的位置移除某元素；</p><p>pop 方法可以返回移除的元素</p><p>tuple没有append()、insert()方法，也不能赋值成另外的元素，其他获取方法和list是一样的。<br>因为tuple不可变，所以代码更安全，如有可能，尽量使用tuple代替list。</p><h3 id="字典">字典</h3><p>字典的迭代，dic.items()可查看字典的每一对键值对，注意：如果直接对字典对象进行迭<br>代或者遍历时默认是遍历字典的“键”：</p><p>使用 dic.clear()方法删除字典</p><p>aStock = {} 只删除了引用，并没有清空字典</p><h3 id="集合">集合</h3><p>如果原序列或可迭代对象中有可变（不可哈希）的值，无法转换成为集合，抛出异常</p><h4 id="增加集合元素">增加集合元素</h4><p>集合对象的 add()方法可以增加新元素，如果该元素已存在则忽略该操作，不会抛出异常；<br>update()方法合并另外一个集合中的元素到当前集合中，并自动去除重复元素。</p><p>集合具有无序性，只能随机删，不能指定索引</p><p>.join返回的是str</p><p>.join接收的也只能是str类型</p><p><code>（）</code>元组</p><p><code>[ ]</code>列表</p><p><code>&#123; &#125;</code>字典</p><p><code>index（,start,end）</code></p><p>字典<code>.get(  ,default)</code> 若不存在 返回默认值</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>校园公告提醒</title>
      <link href="/20230710014120/"/>
      <url>/20230710014120/</url>
      
        <content type="html"><![CDATA[<h2 id="项目背景">项目背景</h2><p>由于学校各种通知、竞赛繁多，相关事宜在不同部门发布，同学们总是错过一些重要的通 知，为了提高获取学校通知的效率，面向中国石油大学（北京）的同学们开发了此软件。此软件主要功能为爬取学校教务处，石油学院，工学院，文理学院，就业创业，共青团的通知并发送邮件到指定邮箱地址。</p><h2 id="概要设计">概要设计</h2><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//202307101343869.png" alt="" loading="lazy"></p><p>采用模块化编程，在<code>main.py</code>中import4个模块，各个模块分别承担相应的功能。</p><p><code>configs.py</code>储存各类配置，方便调用和统一修改</p><p><code>spider.py</code>爬虫主要配置，主要承担数据的提取，分组，写入，检查数据有无更新并返回状态码</p><p><code>send.py</code>    发送邮件模块，使用smtplib库发送html邮件</p><p><code>tool.py</code>  创建目录、文件，日志的写入，获取系统时间的集成，方便在其余模块调用</p><h2 id="运行截图">运行截图</h2><blockquote><p>后面部署到了Linux服务器上，详见：<br><a href="https://blog.izyq.cn/9039/">CUPNotice部署到Linux上 | 奔跑</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//202307101345160.png" alt="" loading="lazy"></p><h2 id="效果展示">效果展示</h2><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//present1.png" alt="" loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master//present2.png" alt="" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爱快 软路由 群晖 All in one 主机折腾日记</title>
      <link href="/53797/"/>
      <url>/53797/</url>
      
        <content type="html"><![CDATA[<h2 id="效果图">效果图</h2><h3 id="实物图">实物图</h3><p>图吧大佬狂喜</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210901104949779.png" alt="" loading="lazy"></p><h3 id="网络拓扑">网络拓扑</h3><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png" alt="" loading="lazy"></p><h3 id="ESXI网络拓扑">ESXI网络拓扑</h3><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210901104358832.png" alt="" loading="lazy"></p><h3 id="iKuai">iKuai</h3><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210901104450931.png" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210901104509316.png" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210901104540125.png" alt="" loading="lazy"></p><h3 id="LEDE">LEDE</h3><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210901104632029.png" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210901104659181.png" alt="" loading="lazy"></p><h2 id="iKuai分流">iKuai分流</h2><ol><li><p>下载文件（<a href="https://raw.githubusercontent.com/hq450/fancyss/master/rules/gfwlist.conf%EF%BC%89">https://raw.githubusercontent.com/hq450/fancyss/master/rules/gfwlist.conf）</a></p></li><li><p>使用Python 将GFwlist转化为iKuai可识别的格式</p></li><li><p>在iKuai域名分流里 导入生成的stream.txt文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#设置区域开始</span>wanname <span class="token operator">=</span> <span class="token string">'wan2'</span> <span class="token comment">#设置出国分流wan口名字</span><span class="token comment">#设置区域结束</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'gfwlist.conf'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    gfwlist_txt <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>pos1 <span class="token operator">=</span> <span class="token number">0</span>pos2 <span class="token operator">=</span> <span class="token number">0</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    pos1 <span class="token operator">=</span> gfwlist_txt<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'ipset=/.'</span><span class="token punctuation">,</span> pos2<span class="token punctuation">)</span>    <span class="token keyword">if</span> pos1 <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    pos2 <span class="token operator">=</span> gfwlist_txt<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'/gfwlist'</span><span class="token punctuation">,</span> pos1<span class="token punctuation">)</span>    data<span class="token punctuation">.</span>append<span class="token punctuation">(</span>gfwlist_txt<span class="token punctuation">[</span>pos1<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">:</span>pos2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>write <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    writedata <span class="token operator">=</span> <span class="token string">'id='</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token string">'enabled=yes comment='</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' domain='</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token number">500</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        writedata <span class="token operator">=</span> writedata<span class="token operator">+</span>ii<span class="token operator">+</span><span class="token string">','</span>    writedata <span class="token operator">=</span> writedata<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>writedata<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    writedata <span class="token operator">=</span> writedata<span class="token operator">+</span><span class="token string">' interface='</span><span class="token operator">+</span>wanname<span class="token operator">+</span><span class="token string">' src_addr= week=1234567 time=00:00-23:59'</span>    write<span class="token punctuation">.</span>append<span class="token punctuation">(</span>writedata<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">500</span> <span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>    writedata <span class="token operator">=</span> <span class="token string">'id='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">'enabled=yes comment='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' domain='</span>    <span class="token keyword">for</span> ii <span class="token keyword">in</span> data<span class="token punctuation">[</span><span class="token number">500</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        writedata <span class="token operator">=</span> writedata <span class="token operator">+</span> ii <span class="token operator">+</span> <span class="token string">','</span>    writedata <span class="token operator">=</span> writedata<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>writedata<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    writedata <span class="token operator">=</span> writedata <span class="token operator">+</span> <span class="token string">' interface='</span><span class="token operator">+</span>wanname<span class="token operator">+</span><span class="token string">' src_addr= week=1234567 time=00:00-23:59'</span>    write<span class="token punctuation">.</span>append<span class="token punctuation">(</span>writedata<span class="token punctuation">)</span>finaldata <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> write<span class="token punctuation">:</span>    finaldata <span class="token operator">=</span> finaldata<span class="token operator">+</span>i <span class="token operator">+</span><span class="token string">'\n'</span><span class="token keyword">print</span><span class="token punctuation">(</span>finaldata<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'stream.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>finaldata<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测个速">测个速</h3><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210901105948342.png" alt="" loading="lazy"></p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210901110014221.png" alt="" loading="lazy"></p><p>实际使用也是 4k无压力</p><h2 id="NAS群晖应用">NAS群晖应用</h2><h3 id="监控-Surveillance">监控:Surveillance</h3><p>家里的萤石云原生支持RSTP串流，和贴吧大佬40个摄像头许可的Surveillance 配合，虽然不是很完美，但是比之前方便太多，尤其是Surveillance的智能延时确实不错</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210901110621692.png" alt="" loading="lazy"></p><h2 id="ESXI安装">ESXI安装</h2><h3 id="网卡驱动注入">网卡驱动注入</h3><p>我的主板网卡是8168 默认不支持 ，因此需要下载<a href="https://vibsdepot.v-front.de/wiki/index.php/Net55-r8168">net55-r8168</a>这个驱动并封装</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/20210831232838.png" alt="" loading="lazy"></p><p>驱动安装参考博客  <a href="https://blog.whsir.com/post-3377.html">https://blog.whsir.com/post-3377.html</a></p><p>ESXI参考博客 <a href="https://blog.csdn.net/huaidan1469/article/details/100032963">https://blog.csdn.net/huaidan1469/article/details/100032963</a></p><h3 id="ESXI管理地址外网访问">ESXI管理地址外网访问</h3><p>转发到443端口，其他均无效</p><p>尝试修改默认端口，但ESXI每次重启后防火墙会重置，修改起来太繁琐。</p><h2 id="NAS群晖安装">NAS群晖安装</h2><p>黑群晖的安装文件分为两个，第一部分为引导项，第二部分为系统镜像。每个版本的引导项支持的群晖系统版本有限，较低版本的引导项可能无法引导较新的系统镜像，导致无法进入系统，所以在选择引导盘时需要注意其是否支持你准备安装的群晖版本。你可以在 <a href="https://xpenology.com/forum/topic/12952-dsm-62-loader/">Jun 大的帖子</a>中获取到所有的引导项下载链接。</p><p>黑群晖和黑苹果的启动方式有点像，启动时会先启动引导，从引导里面读取信息，进而启动对应配置的系统，所以引导和系统是分开的。</p><p>因为引导文件是img格式的镜像文件，无法直接在ESXi上使用。有两种思路，第一种是将synoboot.img转换成iso文件，然后挂到虚拟机的光驱上，开机先启动光驱；另一种是将synoboot.img转换成ESXi的一块虚拟磁盘，这块盘是独立于数据盘的，开机先启动这块装有引导的磁盘。</p><p>首先安装转换引导文件的软件StarWind V2V Converter，<a href="https://www.starwindsoftware.com/download-starwind-products#download">官方下载地址</a></p><p>由于是要给ESXi用，所以选择VMDK，ESXi Server image</p><p>转换成功后得到的两个文件。稍后会将此上传</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/c4ca4238a0b923820dcc.jpg" alt="" loading="lazy"></p><p>1.新建虚拟机</p><p><a href="https://www.bokezhu.com/content/uploads/2019/07/c81e728d9d4c2f636f06.jpg"><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/c81e728d9d4c2f636f06.jpg" alt="" loading="lazy"></a></p><p>2.选择名称和客户机操作系统，按照图片选择就可以，选择完成后下一步</p><p><img src="https://www.bokezhu.com/content/uploads/2019/07/eccbc87e4b5ce2fe2830.jpg" alt="" loading="lazy"></p><p>3.选择存储，这里不要 操作直接下一步</p><p><a href="https://www.bokezhu.com/content/uploads/2019/07/a87ff679a2f3e71d9181.jpg"><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/a87ff679a2f3e71d9181.jpg" alt="" loading="lazy"></a></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/e4da3b7fbbce2345d777.jpg" alt="" loading="lazy"></p><p>5.自定义设置，这里需要删除硬盘1；SCSI控制器0；CD/DVD驱动器0，并且将网卡适配器类型改为E1000，不改可能将无法获取ip地址，修改完成下一步完成配置</p><p>6.下载黑群晖所需工具，下载地址：<a href="https://pan.baidu.com/s/1jCUjEyNht7KHd8UvujvJXA">https://pan.baidu.com/s/1jCUjEyNht7KHd8UvujvJXA</a> 提取码：nc3t 下载完成解压</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/6512bd43d9caa6e02c99.jpg" alt="" loading="lazy"></p><p>7.上传引导文件，在ESXI中找到刚才创建虚拟机位置上传synoboot和synoboot-flat到该文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/c20ad4d76fe97759aa27.jpg" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/c51ce410c124a10e0db5.jpg" alt="" loading="lazy"></p><p>8.返回虚拟机找到刚才添加的虚拟机编辑设置，点击添加现有硬盘找到刚刚上传的synoboot选择保存</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/aab3238922bcc25a6f60.jpg" alt="" loading="lazy"></p><p>9.添加存储硬盘，注意：控制器位置应选择SATA控制器；SATA(0.1)再加一块硬盘应按照排序SATA(0.2)，磁盘模式选择独立-持久后保存，启动虚拟机</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/9bf31c7ff062936a96d3.jpg" alt="" loading="lazy"></p><p>出现图上画面说明引导成功，进行下一步操作。</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/c74d97b01eae257e44aa.jpg" alt="" loading="lazy"></p><p>11.搜索黑群晖ip地址，登录路由器找到在线设备DiskStation就是该设备ip地址。也可以在工具包里找到synology-assistant来搜索ip地址</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/70efdf2ec9b086079795.jpg" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/6f4922f45568161a8cdf.jpg" alt="" loading="lazy"></p><p>12.找到ip后在浏览器输入ip地址，点击设置到下一步；选择浏览找到工具包中DSM_DS3615xs_23824后点击立即安装，安装过程大概持续10分钟</p><p><img src="https://www.bokezhu.com/content/uploads/2019/07/98f13708210194c47568.jpg" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/3c59dc048e8850243be8.jpg" alt="" loading="lazy"></p><p>13.安装完成后跳出创建您的管理员账户，输入服务器名称账号及密码下一步，将更新设置设置成手动安装，SMART检测和启动硬盘扇区警告勾选去掉下一步后不要输入账号直接跳过完成安装。</p><h3 id="硬盘直通之dsm直通-sata直通">硬盘直通之dsm直通&amp;sata直通</h3><blockquote><p>关于 RDM 和 Passthrough 的区别</p><p>如果你提前搜过资料可能会发现很多 ESXi 上安装黑群晖的教程中会提到以 “RDM 来把硬盘直通给群晖”，这实际上很扯淡的，因为 RDM 和设备直通是完全两个独立的概念。<br>一些有玩虚拟机经验的人简单看一下那些 RDM 硬盘直通教程就能发现问题，RDM 是将物理硬件虚拟化后再传递给虚拟机，也就是由 ESXi 读取设备后生成一个新的虚拟设备再传递给虚拟机。而硬件直通（Passthrough）是将物理主机上的设备直接规划给虚拟机独立使用，ESXi 系统不会再利用这个物理硬件。<br>这也就是为什么使用 RDM 虽然可以让群晖读到那么一整个硬盘，但硬盘名称总是 “VMWare 虚拟硬盘”，而使用 Passthrough 的硬盘永远都可以显示出正确的硬盘信息。在黑群晖中，使用 Passthrough 直通硬盘允许群晖系统对硬盘直接进行管理，包括但不限于硬盘休眠和硬盘健康度监测，这些功能使用 RDM 是不可能做到了，RDM 也仅仅做到了让虚拟机读到一个完整的硬盘。</p></blockquote><p>参考博客：<a href="https://blog.irain.in/archives/ESXi_Synology_10G_Passthrough.html">https://blog.irain.in/archives/ESXi_Synology_10G_Passthrough.html</a></p><p>我最终还是选择RDM 参考博客 <a href="https://www.cnblogs.com/vaemaxsky/p/13982648.html">https://www.cnblogs.com/vaemaxsky/p/13982648.html</a></p><h3 id="总结">总结</h3><p>群晖的硬盘设置很重要，不然很容易出现各种奇奇怪怪的问题，我遇到过不进系统，引导后到安装步骤时识别不了硬盘</p><h2 id="iKuai安装">iKuai安装</h2><p>很简单 不赘述</p><h2 id="LEDE安装">LEDE安装</h2><p>科学备份 <a href="https://github.com/izyq/fancyss_history_package">https://github.com/izyq/fancyss_history_package</a></p><p>参考博客 <a href="https://post.smzdm.com/p/awxq6zvm/">https://post.smzdm.com/p/awxq6zvm/</a></p><p><a href="https://www.cnblogs.com/vaemaxsky/p/13982648.html">https://www.cnblogs.com/vaemaxsky/p/13982648.html</a></p><p><a href="https://firmware.koolshare.cn/LEDE_X64_fw867/%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BD%AC%E7%9B%98%E6%88%96PE%E4%B8%8B%E5%86%99%E7%9B%98%E4%B8%93%E7%94%A8/">https://firmware.koolshare.cn/LEDE_X64_fw867/虚拟机转盘或PE下写盘专用/</a></p><p>​</p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 折腾 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RequestParam和RequestBody区别</title>
      <link href="/20210628112532/"/>
      <url>/20210628112532/</url>
      
        <content type="html"><![CDATA[<h2 id="RequestParam和RequestBody区别">RequestParam和RequestBody区别</h2><h3 id="RequestParam">@RequestParam</h3><p>用来处理Content-Type: 为 <code>application/**x-www-form-urlencoded**</code> 编码的内容。（Http协议中，如果不指定Content-Type，则默认传递的参数就是application/x-www-form-urlencoded类型）</p><p><code>RequestParam</code>可以接受简单类型的属性，也可以接受对象类型。<br>实质是将Request.getParameter() 中的<strong>Key-Value</strong>参数<strong>Map</strong>利用Spring的转化机制ConversionService配置，转化成参数接收对象或字段。</p><h4 id="Tip">Tip</h4><p>在Content-Type: application/x-www-form-urlencoded的请求中，<br><strong>get 方式中queryString的值，和post方式中 body data的值都会被Servlet接受到并转化到Request.getParameter()参数集中</strong>，所以@RequestParam可以获取的到。</p><h3 id="RequestBody">@RequestBody</h3><p>处理HttpEntity传递过来的数据，一般用来处理<strong>非</strong>Content-Type: application/x-www-form-urlencoded编码格式的数据。<br>•<strong>GET</strong>请求中，因为没有HttpEntity，所以@RequestBody<strong>并不适用</strong>。<br>•POST请求中，通过HttpEntity传递的参数，必须要在请求头中声明数据的类型Content-Type，SpringMVC通过使用HandlerAdapter 配置的HttpMessageConverters来解析HttpEntity中的数据，然后绑定到相应的bean上。</p><h3 id="总结">总结</h3><p>•在GET请求中，不能使用@RequestBody。<br>•在POST请求，<strong>可以使用@RequestBody和@RequestParam</strong>，但是如果使用@RequestBody，对于参数转化的配置必须统一。</p><p>举个例子，在SpringMVC配置了HttpMessageConverters处理栈中，指定json转化的格式，如Date转成‘yyyy-MM-dd’,则参数接收对象包含的字段如果是Date类型，就只能让客户端传递年月日的格式，不能传时分秒。因为不同的接口，它的参数可能对时间参数有不同的格式要求，所以这样做会让客户端调用同事对参数的格式有点困惑，所以说扩展性不高。</p><p>如果使用@RequestParam来接受参数，可以在接受参数的model中设置@DateFormat指定所需要接受时间参数的格式。</p><p>另外，使用@RequestBody接受的参数是不会被Servlet转化统一放在request对象的Param参数集中，@RequestParam是可以的。</p><p>综上所述，一般情况下，推荐使用@RequestParam注解来接受Http请求参数。<a href="https://blog.csdn.net/xinluke/article/details/52710706">https://blog.csdn.net/xinluke/article/details/52710706</a></p><h2 id="用Map接受JSON数据">用Map接受JSON数据</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">getPage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> params<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultOrderField<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isAsc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//分页参数</span>    <span class="token keyword">long</span> curPage <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> limit <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">PAGE</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">PAGE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//添加空值处理</span>        curPage <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">PAGE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">LIMIT</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">LIMIT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        limit <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">LIMIT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:::info<br>JSON数据：<br><code>&#123;&quot;page&quot;:2,&quot;limit&quot;:10,&quot;key&quot;:null&#125;</code><br>:::</p><blockquote><p>报错：java.lang.Integer cannot be cast to java.lang.String</p></blockquote><blockquote><p>解决</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">PAGE</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">PAGE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//添加空值处理</span>    curPage <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">PAGE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">LIMIT</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">LIMIT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    limit <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Constant</span><span class="token punctuation">.</span><span class="token constant">LIMIT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>先将 Object 类型转换为 string，再将 string 转换为 long/int 不要用（String）</strong><br><strong>至于用toString()还是String.valueOf(object)根据上文阐述按自己需求选。。</strong><br>:::warning<br>参考：<br><a href="https://blog.csdn.net/HolaOrange/article/details/124073605">【异常】java.lang.Integer cannot be cast to java.lang.String</a><br><a href="https://blog.csdn.net/HolaOrange/article/details/124076719">Object转String的4种方法</a><br>:::</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>老毛子内网ddns</title>
      <link href="/46534/"/>
      <url>/46534/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/20210424233043.png" alt="" loading="lazy"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ifconfig</span> <span class="token variable"><span class="token variable">$(</span>nvram get wan0_ifname_t<span class="token variable">)</span></span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">":"</span> <span class="token string">'&#123;print $2&#125;'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token parameter variable">-o</span> <span class="token string">'([0-9]+\.)&#123;3&#125;[0-9]+'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>主要是<code>ifconfig $(nvram get wan0_ifname_t)</code>获取本地ip信息，再通过<code>awk</code>和<code>grep</code>提取</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STM32初探</title>
      <link href="/10409/"/>
      <url>/10409/</url>
      
        <content type="html"><![CDATA[<h4 id="设置堆栈-初始化环境">设置堆栈 初始化环境</h4><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326002304906.png" alt="" loading="lazy"></p><h4 id="添加头文件">添加头文件</h4><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326003410932.png" alt="" loading="lazy"></p><h4 id="选择正确的型号-点开魔法棒">选择正确的型号(点开魔法棒)</h4><h4 id=""><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326003646779.png" alt="" loading="lazy"></h4><h4 id="时钟">时钟</h4><p>控制外设使能与否就是控制这个外设的时钟</p><p>以LED为例</p><ul><li>查看原理图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326203623033.png" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326203806652.png" alt="" loading="lazy"></p><ul><li>查看总线架构</li></ul><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326204617751.png" alt="" loading="lazy"></p><ul><li>找到RCC（复位和时钟控制） 基地址<ul><li>基地址：0x4002 3800</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326205508116.png" alt="" loading="lazy"></p><ul><li>接着找到RCC AHB1 外设时钟使能寄存器 (RCC_AHB1ENR)<ul><li>得到 偏移地址：0x30</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326210058931.png" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326213943927.png" alt="" loading="lazy"></p><p><strong>RCC_AHB1ENR的地址就为基地址 + 偏移地址</strong> 其他以此类推</p><ul><li>AHB1 外设时钟使能寄存器 使能</li></ul><h4 id="推挽模式-寄存器操作-控制时钟">推挽模式 寄存器操作 控制时钟</h4><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326011033237.png" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326011158591.png" alt="" loading="lazy"></p><p>配置寄存器进行相应的模式配置</p><h4 id="通过端口配置表（表28）配置相应的位配置不同的模式">通过端口配置表（表28）配置相应的位配置不同的模式</h4><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326211412621.png" alt="" loading="lazy"></p><p>再次展示我们的原理图</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326203623033.png" alt="" loading="lazy"></p><p>注：<details></p><summary><mark><font color=darkred>点击查看详细配置内容</font></mark></summary><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326212258547.png" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326212318462.png" alt="" loading="lazy"></p><p><strong>OT0 OT1 分别对应GPIO端口0 端口1 以此类推</strong></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326011500510.png" alt="" loading="lazy"></p><p>（输出速度越快 功耗越大 这里的速度指的是GPIO电平翻转的速度 就是高低电平变化的速度）</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326212439536.png" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326212455084.png" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/Pic@master/image-20210326220500358.png" alt="" loading="lazy"></p></details><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*使用寄存器的方法点亮LED灯  */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f4xx.h"</span> </span><span class="token comment">/**  *   主函数  */</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">/*开启 GPIOH 时钟，使用外设时都要先开启它的时钟*/</span>RCC_AHB1ENR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* LED 端口初始化 */</span><span class="token comment">/*GPIOH MODER10清空*/</span>GPIOH_MODER  <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span> <span class="token number">0x03</span><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*PH10 MODER10 = 01b 输出模式*/</span>GPIOH_MODER <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*GPIOH OTYPER10清空*/</span>GPIOH_OTYPER <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*PH10 OTYPER10 = 0b 推挽模式*/</span>GPIOH_OTYPER <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*GPIOH OSPEEDR10清空*/</span>GPIOH_OSPEEDR <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*PH10 OSPEEDR10 = 0b 速率2MHz*/</span>GPIOH_OSPEEDR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*GPIOH PUPDR10清空*/</span>GPIOH_PUPDR <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">0x03</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*PH10 PUPDR10 = 01b 上拉模式*/</span>GPIOH_PUPDR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*PH10 BSRR寄存器的 BR10置1，使引脚输出低电平*/</span>GPIOH_BSRR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">16</span><span class="token operator">&lt;&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*PH10 BSRR寄存器的 BS10置1，使引脚输出高电平*/</span><span class="token comment">//GPIOH_BSRR |= (1&lt;&lt;10);</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 函数为空，目的是为了骗过编译器不报错</span><span class="token keyword">void</span> <span class="token function">SystemInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言</title>
      <link href="/3183/"/>
      <url>/3183/</url>
      
        <content type="html"><![CDATA[<h3 id="温故而知新">温故而知新</h3><h4 id="位操作">位操作</h4><p>（1&lt;&lt;3)<br>取反 ~0xf&lt;&lt;(4*0) 什么意思<br>与 或 操作</p><h4 id="按位取反">按位取反<code>~</code></h4><p>逻辑位运算符中优先级最高，运算符<code>~</code>符号，作用是将1变成0，将0变成1</p><pre class="line-numbers language-none"><code class="language-none">~ 1010 1111  0101 0000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="按位与">按位与<code>&amp;</code></h4><p>优先级第二高，运算符<code>&amp;</code>，存在一个位为0，则结果为0，两个位为1，结果才为1</p><pre class="line-numbers language-none"><code class="language-none">1010 1111&amp;1010 01011010 0101<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="按位异或">按位异或<code>^</code></h4><p>优先级第三，运算符<code>^</code>，两个操作数相同时，结果为0，不同时，结果为1。</p><pre class="line-numbers language-none"><code class="language-none">1111 1111^1111 11110000 00001111 1111^0000 00001111 11111010 1111^1010 01010000 1010<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="按位或">按位或<code>|</code></h4><p>优先级最后 运算符<code>|</code> ，存在一个位为1，则结果为1，两个位为0，结果才为0</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matery的修改与美化</title>
      <link href="/35976/"/>
      <url>/35976/</url>
      
        <content type="html"><![CDATA[<h2 id="修改过的文件">修改过的文件</h2><p><code>hexo-theme-matery\_config.yml</code><br><code>hexo-theme-matery\source\css\matery.css</code><br><code>hexo-theme-matery\layout\_partial\bg-cover-content.ejs</code><br><code>hexo-theme-matery\layout\_partial\post-cover.ejs</code><br><code>hexo-theme-matery\layout\_partial\post-detail.ejs</code><br><code>hexo-theme-matery\layout\_partial\post-detail-toc.ejs</code><br><code>hexo-theme-matery\layout\_partial\github-link.ejs</code><br><code>hexo-theme-matery\layout\_partial\footer.ejs</code><br><code>hexo-theme-matery\layout\about.ejs</code></p><p>可以从<a href="https://github.com/izyq/Matery-officialcodebackup" title="我当初用的源码">我当初用的源码</a>进行比较知道修改了哪些地方</p><h2 id="安装的依赖">安装的依赖</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> hexo-admin <span class="token parameter variable">--save</span>cnpm i <span class="token parameter variable">--save</span> hexo-wordcountcnpm i hexo-permalink-pinyin <span class="token parameter variable">--save</span>cnpm <span class="token function">install</span> hexo-generator-search <span class="token parameter variable">--save</span>cnpm <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>🔗2023再收藏两个链接</p></blockquote><p><a href="https://blog.17lai.site/posts/40300608/#">[三万字教程]基于Hexo的matery主题搭建博客并深度优化一站式完全教程 | 夜法之书</a><br><a href="https://blog.17lai.site/posts/cf0f47fd/">Hexo Markdown以及各种插件功能测试 | 夜法之书</a></p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记</title>
      <link href="/16942/"/>
      <url>/16942/</url>
      
        <content type="html"><![CDATA[<h2 id="群晖-为dsvideo目录添加自动索引">群晖- 为dsvideo目录添加自动索引</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">synoindex <span class="token parameter variable">-R</span> /volume2/video/Download<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="linux-下后台运行python脚本">linux 下后台运行python脚本</h2><h3 id="一、启动命令：">一、启动命令：</h3><p>1、一般使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> python <span class="token parameter variable">-u</span> Job.py <span class="token operator">></span> log.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、只记录异常日志（推荐）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nohup python -u Job.py >/dev/null 2>error.log  2>&amp;1 &amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、不记录任何日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># nohup python -u Job.py >/dev/null  2>&amp;1 &amp;   </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="说明：">说明：</h4><ol><li>末尾的“&amp;”：表示后台运行程序</li><li>“nohup” ：保证程序不被挂起</li><li>“python”：是执行python代码的命令</li><li>“-u”：表示不启用缓存，实时输出打印信息到日志文件（如果不加-u，则会导致日志文件不会实时刷新代码中的print函数的信息）</li><li>“<a href="http://Job.py">Job.py</a>”：是python的源代码文件</li><li>“log.log”：是输出的日志文件</li><li>“&gt;”：是指将打印信息指定到日志文件</li><li>“2&gt;&amp;1”：将标准错误输出转变化标准输出，可以将错误信息也输出到日志文件中（0-&gt; stdin, 1-&gt;stdout, 2-&gt;stderr）</li></ol><h3 id="二、关闭命令">二、关闭命令</h3><p>1、查看进程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ps -ef|grep python</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或者</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ps -ef|grep Job</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、关闭进程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># kill -9 19913</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、检查</p><p>用1中查看进程的命令，检查或确认进程是否真正被关闭。</p>]]></content>
      
      
      <categories>
          
          <category> Others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
            <tag> 群晖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统inodes资源耗尽问题 </title>
      <link href="/6118/"/>
      <url>/6118/</url>
      
        <content type="html"><![CDATA[<h1>问题</h1><p>今天服务器突然崩了，使用的amh面板，执行<code>/etc/init.d/amh-start</code>后所有服务均出现相同的一个错误提示<code>No space left on device</code></p><h1>解决</h1><h3 id="排查">排查</h3><p>查看磁盘空间使用情况，使用<code>df -h</code>命令，磁盘显然没有占满，那是什么问题呢？一番搜寻后发现居然有个叫inode的东西。引起了我的注意。</p><h3 id="查看inodess使用情况，使用df-i命令">查看inodess使用情况，使用<code>df -i</code>命令</h3><p><img src="https://cdn.jsdelivr.net/gh/izyq/izyq.github.io@master/2021/01/23/inode/pasted-0.png" alt="" loading="lazy"><br>由于我没有截图，所以借用一张网图。</p><h3 id="inodes耗尽解决">inodes耗尽解决</h3><ul><li>（1）查看文件最多的目录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> /*<span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span class="token punctuation">;</span> <span class="token function">find</span> <span class="token variable">$i</span> <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果确定目录范围，把/*写的具体点</p><p>最终发现是<code>/var/spool/postfix/maildrop</code>目录下小文件过多，原因如下：</p><p><em>由于linux在执行cron时，会将cron执行脚本中的output和warning信息，都会以邮件的形式发送给cron所有者。由于客户环境中的sendmail和postfix没有正常运行，邮件发送不成功，导致全部小文件都堆积在maildrop目录下，另由于缺乏自动清理的机制，故此目录下堆积了大量的文件。</em></p><ul><li>（2）删除大量文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-n</span> <span class="token number">1000</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要使用<code>xargs</code>命令，不然会删除失败。</p><h1>inodes介绍</h1><p>Linux系统下文件数据储存在”块”中，文件的元信息，例如文件的创建者、文件的创建日期、文件的大小等。这种储存文件元信息的区域就叫做inode，中文译名为”索引节点”。</p><p>inode也占用硬盘空间，硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是inode区（inode table），存放inode所包含的信息。</p><p>每个inode节点的大小，一般是128字节或256字节。inode节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个inode。假定在一块1GB的硬盘中，每个inode节点的大小为128字节，每1KB就设置一个inode，那么inode table的大小就会达到128MB，占整块硬盘的12.8%。</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Open薇屁嗯实现静态ip </title>
      <link href="/51462/"/>
      <url>/51462/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>由于我的电脑p775太重，学校某些地方端口封锁，而我又需要一个稳定的远程连接方式，于是开始折腾起自己家里的网件R6400。</li></ul></blockquote><h1>前期准备</h1><p><strong>对于要向其分配静态IP地址的每个OpenVPN客户端，您需要从该特定客户端证书中提取通用名称。</strong></p><p>我的路由器使用的是梅林固件，<code>Firmware:380.70_0-X7.9</code>，我在vpn配置好用户名和密码后发现每个连接的<em>common name</em>都是client，没法给每个用户名单独配置，我苦苦寻求方法无果后，偶然发现在高级设置里面开启这两项，用户名就成了common name</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/izyq.github.io@master/2021/01/23/openvp/pasted-1.png" alt="" loading="lazy"></p><p><img src="https://cdn.jsdelivr.net/gh/izyq/izyq.github.io@master/2021/01/23/openvp/pasted-2.png" alt="" loading="lazy"></p><h1>为Open薇屁嗯客户端分配静态IP地址</h1><h2 id="创建一个文件来存储静态IP地址">创建一个文件来存储静态IP地址</h2><p>有了<code>common name</code>后，一切都变得好办起来。<br>使用 client-config-dir 选项，要求将分配给连接客户端的静态IP地址存储在OpenVPN服务器可以读取的文件中。<br>在R6400中，我们在高级设置 自定义配置中添加一行</p><pre class="line-numbers language-none"><code class="language-none">client-config-dir &#x2F;etc&#x2F;ccd #路径可以更改<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/izyq/izyq.github.io@master/2021/01/23/openvp/pasted-3.png" alt="" loading="lazy"></p><h2 id="为OpenVPN客户端分配静态IP地址">为OpenVPN客户端分配静态IP地址</h2><p>有了客户端的通用名称后，您就可以使用 ifconfig-push 选项。<br>例如，给通用名称为<strong>ipad</strong>的客户端分配静态ip地址：</p><pre class="line-numbers language-none"><code class="language-none">mkdir &#x2F;etc&#x2F;ccdecho ifconfig-push 10.8.0.10 255.255.255.0 &gt; &#x2F;etc&#x2F;ccd&#x2F;gx8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后输入用户名gx8和密码重新连接，open薇屁嗯就会分配你设定好的ip地址</p><h2 id="不完美与瑕疵">不完美与瑕疵</h2><p>R6400ssh连接用admin用户登陆没有root权限，而etc根目录的etc文件是tmp文件夹里的一个软链接，这意味着路由器每次重启你都需要重新创建这样一个文件，后面再去研究怎么解决这个问题吧！</p><h1>补充 win10 open薇屁嗯 UI 的开机自动连接设置方法</h1><p>如图所示，给openvpn的快捷方式目标里面加上这一句</p><pre class="line-numbers language-none"><code class="language-none">--connect client1.ovpn #clint1是你的配置文件名称，根据实际情况自行修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/izyq/izyq.github.io@master/2021/01/23/openvp/pasted-4.png" alt="" loading="lazy"><br>然后按win+R ，输入<code>shell:startup</code>，把改好的快捷方式复制进去便大功告成啦</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现强智科技教务系统抢课（两种方法） </title>
      <link href="/33987/"/>
      <url>/33987/</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>又到了选课的时间，又一次被教务系统的预选给安排了，硬是一门都没选中。于是想实现有没有自动捡课的方法。就整体分为两种方法，一种是获取get请求然后由python多线程提交去选课，一种是利用自动化测试的selenium库去调用谷歌浏览器模拟人工选课操作。其实就算都是强智系统，但细节上还是有些差别的。所以也有可能无法实现。这里放出两种方法的代码和流程，仅供参考。</p><h2 id="方法一：">方法一：</h2><p>直接提交选课的数据包（需要cookie和课程ID）,先用同学的账号登录教务系统，进入到选课的地方，打开浏览器的开发模式（按F12），点击Network(）我这里是谷歌浏览器，如果是其他的找到网络抓包即可。</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/izyq.github.io@master/2021/01/23/qiang-k/pasted-0.png" alt="" loading="lazy"></p><p>点击你想选择课程的选课按钮，得到我们需要的数据包。</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/izyq.github.io@master/2021/01/23/qiang-k/pasted-1.png" alt="" loading="lazy"></p><p>我们来看下这个数据包的内容，我们需要找到cookie( 你的身份标识），以及我们需要选的课程ID，然后用python模拟提交就OK了。</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/izyq.github.io@master/2021/01/23/qiang-k/pasted-2.png" alt="" loading="lazy"></p><p>注意 代码里的User_Agent和Referer也要记得修改，都在数据包里。</p><p><img src="https://cdn.jsdelivr.net/gh/izyq/izyq.github.io@master/2021/01/23/qiang-k/pasted-3.png" alt="" loading="lazy"></p><p>下面是代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> future<span class="token punctuation">.</span>backports<span class="token punctuation">.</span>test<span class="token punctuation">.</span>ssl_servers <span class="token keyword">import</span> threading  <span class="token comment"># 获取cookie 和 课程id就可以抢课</span>  <span class="token keyword">def</span> <span class="token function">qian1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token number">201820192001656</span>    <span class="token comment"># data 是找到的课程ID，因为python没学好，代码写的有点乱</span>    <span class="token comment"># 下面是地址 就是我们抓到的那个数据包的URL</span>    url <span class="token operator">=</span> <span class="token string">'http://****（学校的地址）.edu.cn/jsxsd/xsxkkc/bxxkOper?jx0404id='</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    cookie <span class="token operator">=</span> <span class="token string">' 用找到的cookie替换'</span>    header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36'</span><span class="token punctuation">,</span>        <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://........../srun_portal_pc.php?ac_id=1'</span><span class="token punctuation">,</span>        <span class="token string">'cookie'</span><span class="token punctuation">:</span>cookie    <span class="token punctuation">&#125;</span>     <span class="token comment"># 一直抢！</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token comment"># 设定5s服务器未应答就放弃这次，鬼知道是服务器炸了还是。。。。</span>        mes <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>         <span class="token comment"># 打印返回的结果，就是弹出来的那个小窗口的内容</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>mes<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>mes<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 后面是不同的课，因为不能吊在一课树上！</span><span class="token keyword">def</span> <span class="token function">qian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token number">201820192001302</span>    url <span class="token operator">=</span> <span class="token string">'http://*****/jsxsd/xsxkkc/bxxkOper?jx0404id='</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    cookie <span class="token operator">=</span> <span class="token string">'*****cookie'</span>    header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36'</span><span class="token punctuation">,</span>        <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://172.30.1.70/srun_portal_pc.php?ac_id=1'</span><span class="token punctuation">,</span>        <span class="token string">'cookie'</span><span class="token punctuation">:</span>cookie    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        mes <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>mes<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>mes<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">qian2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token number">201820192001155</span>    url <span class="token operator">=</span> <span class="token string">'http://****n/jsxsd/xsxkkc/bxxkOper?jx0404id='</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>    cookie <span class="token operator">=</span> <span class="token string">'cookie'</span>      header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36'</span><span class="token punctuation">,</span>        <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://172.30.1.70/srun_portal_pc.php?ac_id=1'</span><span class="token punctuation">,</span>        <span class="token string">'cookie'</span><span class="token punctuation">:</span> cookie    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        mes <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>mes<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>mes<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 开多线程分开抢课</span>    <span class="token comment"># 接下来就会一直抢课！</span>    thread1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>qian<span class="token punctuation">)</span>    thread2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>qian1<span class="token punctuation">)</span>    thread3 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>qian2<span class="token punctuation">)</span>    thread4 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>qian<span class="token punctuation">)</span>    thread5 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>qian1<span class="token punctuation">)</span>    thread6 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>qian2<span class="token punctuation">)</span>    thread1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    thread2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    thread3<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    thread4<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    thread5<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    thread6<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>   main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法二：selenium库模拟人工选课">方法二：selenium库模拟人工选课</h2><p>要使用这个方法之前，最好先看一下这一篇文章，<a href="https://blog.csdn.net/weixin_43314519/article/details/107092245">了解如何使用selenium库</a>。记得提前安装好selenium库，以及Chromedriver。具体方法可以在csdn搜索。</p><h3 id="使用流程">使用流程</h3><ol><li>将脚本内信息填好改好</li><li>运行脚本，此时会打开chrome并且打开登录页，脚本会自行填写学号密码，需要等你填写验证码</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># author: Zmaster</span><span class="token comment"># time: 2020/7/2 12:03</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>keys <span class="token keyword">import</span> Keys<span class="token keyword">from</span> time <span class="token keyword">import</span> sleepchrome_options <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Qiangke</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    login_url <span class="token operator">=</span> <span class="token string">"https://***.edu.cn/jsxsd/"</span>  <span class="token comment">#登录页面，修改成你学校的登录地址</span>    select_url <span class="token operator">=</span> <span class="token string">"****/jsxsd/xsxk/xsxk_index?jx0502zbid=B563D5935D024C6387445066336AA73B"</span><span class="token comment">#修改为登录成功后的界面</span>    initmy_url <span class="token operator">=</span> <span class="token string">"https://****/jsxsd/framework/xsMain.jsp"</span>    <span class="token comment">#修改为你选课的界面</span>    xh <span class="token operator">=</span> <span class="token string">u"****"</span>  <span class="token comment">#填写用户名</span>    pwd <span class="token operator">=</span> <span class="token string">'****'</span>   <span class="token comment">#填写密码</span>    _user <span class="token operator">=</span> <span class="token string">"****@qq.com"</span> <span class="token comment">#填写你的邮箱（用于发邮件提醒抢课成功）</span>    _pwd <span class="token operator">=</span> <span class="token string">"****"</span>  <span class="token comment">#授权码，在邮箱里获得</span>    _to <span class="token operator">=</span> <span class="token string">"****@qq.com"</span> <span class="token comment">#收件人邮箱，可以写自己的，帮别人抢课就发别人的</span>    course_category <span class="token operator">=</span> <span class="token string">u'公选课选课'</span>  <span class="token comment"># 这里填写选课种类，这个脚本只能抢跨年级，跨专业，和公选，需输入完整的名字如“专业内跨年级选课”，“跨专业选课”，“公选课选课”</span>    class_name <span class="token operator">=</span> <span class="token string">u"美术赏析"</span>  <span class="token comment">#这里输入你想抢的课的名字（关键字即可）</span>    teacher_name <span class="token operator">=</span> <span class="token string">u""</span>  <span class="token comment">#这里输入你想抢的课的老师的名字</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始抢课"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>login_url<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"details-button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"proceed-link"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">"USERNAME"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>self<span class="token punctuation">.</span>xh<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">"PASSWORD"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pwd<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"等待验证码，自行输入...."</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>current_url <span class="token operator">!=</span> self<span class="token punctuation">.</span>initmy_url<span class="token punctuation">:</span>                sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>    <span class="token keyword">def</span> <span class="token function">send</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">,</span> send_msg<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">import</span> smtplib        <span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText        msg <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>text<span class="token punctuation">)</span>        msg<span class="token punctuation">[</span><span class="token string">"Subject"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"你选课成功了！"</span>        msg<span class="token punctuation">[</span><span class="token string">"From"</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>_user        msg<span class="token punctuation">[</span><span class="token string">"To"</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>_to        s <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span><span class="token string">"smtp.qq.com"</span><span class="token punctuation">,</span> <span class="token number">465</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>login<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_user<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_pwd<span class="token punctuation">)</span>        s<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_user<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_to<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 这里需要根据自己的教务系统去修改了，有挺多不一样的地方。所以建议阅读完使用文档再来修改</span>        self<span class="token punctuation">.</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>chrome_options<span class="token operator">=</span>chrome_options<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>select_url<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span>self<span class="token punctuation">.</span>course_category<span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span>self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="mainFrame"]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'kcxx'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>self<span class="token punctuation">.</span>class_name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'skls'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span>self<span class="token punctuation">.</span>teacher_name<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_value<span class="token punctuation">(</span><span class="token string">u"查询"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        cnt <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">'选课'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>default_content<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span>self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="mainFrame"]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">"选课"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>            dig_alert <span class="token operator">=</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>alert            dig_alert<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>            text <span class="token operator">=</span> dig_alert<span class="token punctuation">.</span>text            <span class="token keyword">if</span> text <span class="token operator">!=</span> <span class="token string">'选课失败：此课堂选课人数已满！'</span> <span class="token keyword">and</span> text <span class="token operator">!=</span> <span class="token string">''</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">'&#123;&#125;  选课成功'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>class_name<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>            <span class="token keyword">elif</span> text <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>                dig_alert<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>            cnt <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> cnt <span class="token operator">%</span> <span class="token number">200</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    qiangke <span class="token operator">=</span> Qiangke<span class="token punctuation">(</span><span class="token punctuation">)</span>    qiangke<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式30min入门</title>
      <link href="/59569/"/>
      <url>/59569/</url>
      
        <content type="html"><![CDATA[<blockquote><p>看到一个很不错的文章，转载一下，以后需要就翻翻，顺便给自己标一下重点</p><p>原文链接：<a href="https://deerchao.cn/tutorials/regex/regex.htm">https://deerchao.cn/tutorials/regex/regex.htm</a></p></blockquote><h3 id="如何使用本教程">如何使用本教程</h3><p>别被下面那些复杂的表达式吓倒，只要跟着我一步一步来，你会发现正则表达式其实并没有想像中的那么困难。当然，如果你看完了这篇教程之后，发现自己明白了很多，却又几乎什么都记不得，那也是很正常的——我认为，没接触过正则表达式的人在看完这篇教程后，能把提到过的语法记住80%以上的可能性为零。这里只是让你明白基本的原理，以后你还需要多练习，多使用，才能熟练掌握正则表达式。</p><p>除了作为入门教程之外，本文还试图成为可以在日常工作中使用的正则表达式语法参考手册。就作者本人的经历来说，这个目标还是完成得不错的——你看，我自己也没能把所有的东西记下来，不是吗？</p><p>本文介绍的大部分正则语法，在不同的正则表达式引擎中都可以使用，但也有一些会有所差异。本文介绍的是 .Net 下的正则表达式，其它环境下的具体情况可以在读完本文后去参考官方文档，或者查看正则表达式引擎特性对比。</p><h3 id="正则表达式到底是什么东西？">正则表达式到底是什么东西？</h3><p>在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。</p><p>很可能你使用过Windows/Dos下用于文件查找的通配符(wildcard)，也就是<em>和?。如果你想查找某个目录下的所有的Word文档的话，你会搜索</em>.doc。在这里，*会被解释成任意的字符串。和通配符类似，正则表达式也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求——当然，代价就是更复杂——比如你可以编写一个正则表达式，用来查找所有以0开头，后面跟着2-3个数字，然后是一个连字号“-”，最后是7或8位数字的字符串(像010-12345678或0376-7654321)。</p><h3 id="入门">入门</h3><p>学习正则表达式的最好方法是从例子开始，理解例子之后再自己对例子进行修改，实验。下面给出了不少简单的例子，并对它们作了详细的说明。</p><p>假设你在一篇英文小说里查找hi，你可以使用正则表达式hi。</p><p>这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：<strong>由两个字符组成，前一个字符是h,后一个是i</strong>。通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配hi,HI,Hi,hI这四种情况中的任意一种。</p><p>不幸的是，很多单词里包含hi这两个连续的字符，比如him,history,high等等。用hi来查找的话，这里边的hi也会被找出来。如果要精确地查找hi这个单词的话，我们应该使用<code>\bhi\b</code>。</p><p><strong>\b</strong>是正则表达式规定的一个特殊代码（好吧，某些人叫它<strong>元字符，metacharacter</strong>），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是\b并不匹配这些单词分隔字符中的任何一个，它只匹配一个位置。</p><p>假如你要找的是hi后面不远处跟着一个Lucy，你应该用\bhi\b.*\bLucy\b。</p><p>这里，.是另一个元字符，匹配除了换行符以外的任意字符。<em>同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定</em>前边的内容可以连续重复使用任意次以使整个表达式得到匹配。因此，.<em>连在一起就意味着任意数量的不包含换行的字符。现在\bhi\b.</em>\bLucy\b的意思就很明显了：先是一个单词hi,然后是任意个任意字符(但不能是换行)，最后是Lucy这个单词。</p><p>如果同时使用其它元字符，我们就能构造出功能更强大的正则表达式。比如下面这个例子：</p><p>0\d\d-\d\d\d\d\d\d\d\d匹配这样的字符串：以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字(也就是中国的电话号码。当然，这个例子只能匹配区号为3位的情形)。</p><p>这里的\d是个新的元字符，匹配一位数字(0，或1，或2，或……)。-不是元字符，只匹配它本身——连字符(或者减号，或者中横线，或者随你怎么称呼它)。</p><p>为了避免那么多烦人的重复，我们也可以这样写这个表达式：<strong>0\d{2}-\d{8}</strong>。这里\d后面的{2}({8})的意思是前面\d必须连续重复匹配2次(8次)。</p><h3 id="元字符">元字符</h3><p>现在你已经知道几个很有用的元字符了，如**\b,.,***，还有\d.正则表达式里还有更多的元字符，比如\s匹配任意的空白符，包括空格，制表符(Tab)，换行符，中文全角空格等。\w匹配字母或数字或下划线或汉字等。</p><p>下面来看看更多的例子：</p><p><strong>\ba\w*\b</strong>匹配以字母a开头的单词——先是某个单词开始处(\b)，然后是字母a,然后是任意数量的字母或数字(\w*)，最后是单词结束处(\b)。</p><p>**\d+**匹配1个或更多连续的数字。这里的+是和<em>类似的元字符，不同的是</em>匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次。</p><p><strong>\b\w{6}\b</strong> 匹配刚好6个字符的单词。</p><h4 id="表1-常用的元字符">表1.常用的元字符</h4><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线或汉字</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\b</td><td>匹配单词的开始或结束</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table><p>元字符<sup>（和数字6在同一个键位上的符号）和$都匹配一个位置，这和\b有点类似。</sup>匹配你要用来查找的字符串的开头，$匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果要求你填写的QQ号必须为5位到12位数字时，可以使用：^\d{5,12}$。</p><p>这里的{5,12}和前面介绍过的{2}是类似的，只不过{2}匹配只能不多不少重复2次，{5,12}则是重复的次数不能少于5次，不能多于12次，否则都不匹配。</p><p>因为使用了^和$，所以输入的整个字符串都要用来和\d{5,12}来匹配，也就是说整个输入必须是5到12个数字，因此如果输入的QQ号能匹配这个正则表达式的话，那就符合要求了。</p><p>和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。如果选中了这个选项，^和$的意义就变成了匹配行的开始处和结束处。</p><h3 id="字符转义">字符转义</h3><p>如果你想查找元字符本身的话，比如你查找.,或者*,就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这时你就得使用\来取消这些字符的特殊意义。因此，你应该使用.和*。当然，要查找\本身，你也得用.</p><p>例如：<a href="http://deerchao.xn--cndeerchao-yf4qq370d.cn">deerchao.cn匹配deerchao.cn</a>，C:\Windows匹配C:\Windows。</p><h3 id="重复">重复</h3><p>你已经看过了前面的*,+,{2},{5,12}这几个匹配重复的方式了。下面是正则表达式中所有的限定符(指定数量的代码，例如*,{5,12}等)：</p><h4 id="表2-常用的限定符">表2.常用的限定符</h4><table><thead><tr><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><p>下面是一些使用重复的例子：</p><p>Windows\d+匹配Windows后面跟1个或更多数字</p><p>^\w+匹配一行的第一个单词(或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)</p><h3 id="字符类">字符类</h3><p>要想查找数字，字母或数字，空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合(比如元音字母a,e,i,o,u),应该怎么办？</p><p>很简单，你只需要在方括号里列出它们就行了，像[aeiou]就匹配任何一个英文元音字母，[.?!]匹配标点符号(.或?或!)。</p><p>我们也可以轻松地指定一个字符范围，像[0-9]代表的含意与\d就是完全一致的：一位数字；同理[a-z0-9A-Z_]也完全等同于\w（如果只考虑英文的话）。</p><p>下面是一个更复杂的表达式：(?0\d{2}[) -]?\d{8}。</p><p>这个表达式可以匹配几种格式的电话号码，像(010)88886666，或022-22334455，或02912345678等。我们对它进行一些分析吧：首先是一个转义字符(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\d{2})，然后是)或-或空格中的一个，它出现1次或不出现(?)，最后是8个数字(\d{8})。</p><h3 id="分枝条件">分枝条件</h3><p>不幸的是，刚才那个表达式也能匹配010)12345678或(022-87654321这样的“不正确”的格式。要解决这个问题，我们需要用到分枝条件。正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。听不明白？没关系，看例子：</p><p>0\d{2}-\d{8}|0\d{3}-\d{7}这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445)。</p><p>(0\d{2})[- ]?\d{8}|0\d{2}[-  ]?\d{8}这个表达式匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔。你可以试试用分枝条件把这个表达式扩展成也支持4位区号的。</p><p>\d{5}-\d{4}|\d{5}这个表达式用于匹配美国的邮政编码。美国邮编的规则是5位数字，或者用连字号间隔的9位数字。之所以要给出这个例子是因为它能说明一个问题：<strong>使用分枝条件时，要注意各个条件的顺序</strong>。如果你把它改成\d{5}|\d{5}-\d{4}的话，那么就只会匹配5位的邮编(以及9位邮编的前5位)。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。</p><h3 id="分组">分组</h3><p>我们已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了）；但如果想要重复多个字符又该怎么办？你可以用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作(后面会有介绍)。</p><p>(\d{1,3}.){3}\d{1,3}是一个简单的IP地址匹配表达式。要理解这个表达式，请按下列顺序分析它：\d{1,3}匹配1到3位的数字，(\d{1,3}.){3}匹配三位数字加上一个英文句号(这个整体也就是这个分组)重复3次，最后再加上一个一到三位的数字(\d{1,3})。</p><p>不幸的是，它也将匹配256.300.888.999这种不可能存在的IP地址。如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能，所以只能使用冗长的分组，选择，字符类来描述一个正确的IP地址：((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)。</p><p>理解这个表达式的关键是理解2[0-4]\d|25[0-5]|[01]?\d\d?，这里我就不细说了，你自己应该能分析得出来它的意义。</p><h3 id="反义">反义</h3><p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义：</p><h4 id="表3-常用的反义代码">表3.常用的反义代码</h4><table><thead><tr><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>\W</td><td>匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\B</td><td>匹配不是单词开头或结束的位置</td></tr><tr><td>[^x]</td><td>匹配除了x以外的任意字符</td></tr><tr><td>[^aeiou]</td><td>匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table><p>例子：\S+匹配不包含空白符的字符串。</p><p>&lt;a[^&gt;]+&gt;匹配用尖括号括起来的以a开头的字符串。</p><h3 id="后向引用">后向引用</h3><p>使用小括号指定一个子表达式后，<strong>匹配这个子表达式的文本</strong>(也就是此分组捕获的内容)可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为1，第二个为2，以此类推。</p><p>后向引用用于重复搜索前面某个分组匹配的文本。例如，\1代表分组1匹配的文本。难以理解？请看示例：</p><p>\b(\w+)\b\s+\1\b可以用来匹配重复的单词，像go                go, 或者kitty  kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字(\b(\w+)\b)，这个单词会被捕获到编号为1的分组中，然后是1个或几个空白符(\s+)，最后是分组1中捕获的内容（也就是前面匹配的那个单词）(\1)。</p><p>你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：(?\w+)(或者把尖括号换成’也行：(?’Word’\w+)),这样就把\w+的组名指定为Word了。要反向引用这个分组捕获的内容，你可以使用\k,所以上一个例子也可以写成这样：\b(?\w+)\b\s+\k\b。</p><p>使用小括号的时候，还有很多特定用途的语法。下面列出了最常用的一些：</p><h4 id="表4-常用分组语法">表4.常用分组语法</h4><table><thead><tr><th>分类</th><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>捕获</td><td>(exp)</td><td>匹配exp,并捕获文本到自动命名的组里</td></tr><tr><td>(?exp)</td><td>匹配exp,并捕获文本到名称为name的组里，也可以写成(?’name’exp)</td><td></td></tr><tr><td>(?:exp)</td><td>匹配exp,不捕获匹配的文本，也不给此分组分配组号</td><td></td></tr><tr><td>零宽断言</td><td>(?=exp)</td><td>匹配exp前面的位置</td></tr><tr><td>(?&lt;=exp)</td><td>匹配exp后面的位置</td><td></td></tr><tr><td>(?!exp)</td><td>匹配后面跟的不是exp的位置</td><td></td></tr><tr><td>(?&lt;!exp)</td><td>匹配前面不是exp的位置</td><td></td></tr><tr><td>注释</td><td>(?#comment)</td><td>这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</td></tr></tbody></table><table><thead><tr><th>注释</th><th>(?#comment)</th><th>这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><p>我们已经讨论了前两种语法。第三个(?:exp)不会改变正则表达式的处理方式，只是这样的组匹配的内容不会像前两种那样被捕获到某个组里面，也不会拥有组号。“我为什么会想要这样做？”——好问题，你觉得为什么呢？</p><h3 id="零宽断言">零宽断言</h3><p>接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西，也就是说它们像\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言。最好还是拿例子来说明吧：</p><p>(?=exp)也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。比如\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I’m singing while you’re                dancing.时，它会匹配sing和danc。</p><p>(?&lt;=exp)也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp。比如(?&lt;=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading。</p><p>假如你想要给一个很长的数字中每三位间加一个逗号(当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：((?&lt;=\d)\d{3})+\b，用它对1234567890进行查找时结果是234567890。</p><p>下面这个例子同时使用了这两种断言：(?&lt;=\s)\d+(?=\s)匹配以空白符间隔的数字(再次强调，不包括这些空白符)。</p><h3 id="负向零宽断言">负向零宽断言</h3><p>前面我们提到过怎么查找<strong>不是某个字符或不在某个字符类里</strong>的字符的方法(反义)。但是如果我们只是想要<strong>确保某个字符没有出现，但并不想去匹配它</strong>时怎么办？例如，如果我们想查找这样的单词–它里面出现了字母q,但是q后面跟的不是字母u,我们可以尝试这样：</p><p>\b\w<em>q[<sup>u]\w*\b匹配包含**后面不是字母u的字母q**的单词。但是如果多做测试(或者你思维足够敏锐，直接就观察出来了)，你会发现，如果q出现在单词的结尾的话，像**Iraq**,**Benq**，这个表达式就会出错。这是因为[</sup>u]总要匹配一个字符，所以如果q是单词的最后一个字符的话，后面的[<sup>u]将会匹配q后面的单词分隔符(可能是空格，或者是句号或其它的什么)，后面的\w*\b将会匹配下一个单词，于是\b\w*q[</sup>u]\w</em>\b就能匹配整个Iraq fighting。负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不<strong>消费</strong>任何字符。现在，我们可以这样来解决这个问题：\b\w<em>q(?!u)\w</em>\b。</p><p>零宽度负预测先行断言(?!exp)，断言此位置的后面不能匹配表达式exp。例如：\d{3}(?!\d)匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b匹配不包含连续字符串abc的单词。</p><p>同理，我们可以用(?&lt;!exp),零宽度负回顾后发断言来断言此位置的前面不能匹配表达式exp：(?&lt;![a-z])\d{7}匹配前面不是小写字母的七位数字。</p><p>一个更复杂的例子：(?&lt;=&lt;(\w+)&gt;).*(?=&lt;/\1&gt;)匹配不包含属性的简单HTML标签内里的内容。(?&lt;=&lt;(\w+)&gt;)指定了这样的前缀：被尖括号括起来的单词(比如可能是**)，然后是.*****(任意的字符串),最后是一个后缀(?=&lt;/\1&gt;)。注意后缀里的/，它用到了前面提过的字符转义；\1则是一个反向引用，引用的正是捕获的第一组，前面的(\w+)匹配的内容，这样如果前缀实际上是**的话，后缀就是**了。整个表达式匹配的是*<em>和*<em>之间的内容(再次提醒，不包括前缀和后缀本身)。</em></em></p><p><strong>注释小括号的另一种用途是通过语法(?#comment)来包含注释。例如：2[0-4]\d(?#200-249)|25<a href="https://izyq.github.io/2020/07/31/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F30min%E5%85%A5%E9%97%A8/?#250-255">0-5</a>|[01]?\d\d?(?#0-199)。 要包含注释的话，最好是启用“忽略模式里的空白符”选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在#后面到这一行结束的所有文本都将被当成注释忽略掉。例如，我们可以前面的一个表达式写成这样：</strong></p><pre class="line-numbers language-none"><code class="language-none">(?&lt;&#x3D;    # 断言要匹配的文本的前缀&lt;(\w+)&gt; # 查找尖括号括起来的内容        # (即HTML&#x2F;XML标签))       # 前缀结束.*      # 匹配任意文本(?&#x3D;     # 断言要匹配的文本的后缀&lt;\&#x2F;\1&gt;  # 查找尖括号括起来的内容        # 查找尖括号括起来的内容)       # 后缀结束<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="贪婪与懒惰">贪婪与懒惰</h3><p>**当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配**尽可能多**的字符。以这个表达式为例：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。         有时，我们更需要懒惰匹配，也就是匹配**尽可能少**的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.*?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧： a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。 **</p><p><strong>表5.懒惰限定符</strong></p><table><thead><tr><th><strong>代码/语法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>*<strong>?</strong></td><td><strong>重复任意次，但尽可能少重复</strong></td></tr><tr><td><strong>+?</strong></td><td><strong>重复1次或更多次，但尽可能少重复</strong></td></tr><tr><td><strong>??</strong></td><td><strong>重复0次或1次，但尽可能少重复</strong></td></tr><tr><td><strong>{n,m}?</strong></td><td><strong>重复n到m次，但尽可能少重复</strong></td></tr><tr><td><strong>{n,}?</strong></td><td><strong>重复n次以上，但尽可能少重复</strong></td></tr></tbody></table><h3 id="处理选项">处理选项</h3><p><strong>上面介绍了几个选项如忽略大小写，处理多行等，这些选项能用来改变处理正则表达式的方式。下面是.Net中常用的正则表达式选项：</strong></p><h4 id="表6-常用的处理选项">表6.常用的处理选项</h4><table><thead><tr><th><strong>名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>IgnoreCase(忽略大小写)</strong></td><td><strong>匹配时不区分大小写。</strong></td></tr><tr><td><strong>Multiline(多行模式)</strong></td><td><strong>更改^和$的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$的精确含意是:匹配\n之前的位置以及字符串结束前的位置.)</strong></td></tr><tr><td><strong>Singleline(单行模式)</strong></td><td><strong>更改.的含义，使它与每一个字符匹配（包括换行符\n）。</strong></td></tr><tr><td><strong>IgnorePatternWhitespace(忽略空白)</strong></td><td><strong>忽略表达式中的非转义空白并启用由#标记的注释。</strong></td></tr><tr><td><strong>ExplicitCapture(显式捕获)</strong></td><td><strong>仅捕获已被显式命名的组。</strong></td></tr></tbody></table><p><strong>一个经常被问到的问题是：是不是只能同时使用多行模式和单行模式中的一种？答案是：不是。这两个选项之间没有任何关系，除了它们的名字比较相似（以至于让人感到疑惑）以外。事实上，为了避免混淆，在最新的                    JavaScript                    中，单行模式其实名叫  dotAll，意为点可以匹配所有字符，然而在指定该选项时，用的还是 Singleline 的首字母 s.</strong></p><h3 id="平衡组-递归匹配">平衡组/递归匹配</h3><p>有时我们需要匹配像( 100 * ( 50 + 15 ) )这样的可嵌套的层次性结构，这时简单地使用(.+)则只会匹配到最左边的左括号和最右边的右括号之间的内容(这里我们讨论的是贪婪模式，懒惰模式也有下面的问题)。假如原来的字符串里的左括号和右括号出现的次数不相等，比如( 5 / ( 3 + 2 ) ) )，那我们的匹配结果里两者的个数也不会相等。有没有办法在这样的字符串里匹配到最长的，配对的括号之间的内容呢？</p><p>为了避免(和(把你的大脑彻底搞糊涂，我们还是用尖括号代替圆括号吧。现在我们的问题变成了如何把xx &lt;aa                        <bbb> <bbb> aa&gt; yy这样的字符串里，最长的配对的尖括号内的内容捕获出来？</p><p>这里需要用到以下的语法构造：</p><ul><li>(?‘group’) 把捕获的内容命名为group,并压入堆栈(Stack)</li><li>(?‘-group’) 从堆栈上弹出最后压入堆栈的名为group的捕获内容，如果堆栈本来为空，则本分组的匹配失败</li><li>(?(group)yes|no) 如果堆栈上存在以名为group的捕获内容的话，继续匹配yes部分的表达式，否则继续匹配no部分</li><li>(?!) 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败</li></ul><p>我们需要做的是每碰到了左括号，就在压入一个&quot;Open&quot;,每碰到一个右括号，就弹出一个，到了最后就看看堆栈是否为空－－如果不为空那就证明左括号比右括号多，那匹配就应该失败。正则表达式引擎会进行回溯(放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配。</p><pre class="line-numbers language-none"><code class="language-none">&lt;                   #最外层的左括号  [^&lt;&gt;]*            #它后面非括号的内容  (      (        (?&#39;Open&#39;&lt;)  #左括号，压入&quot;Open&quot;        [^&lt;&gt;]*      #左括号后面的内容      )+      (        (?&#39;-Open&#39;&gt;) #右括号，弹出一个&quot;Open&quot;        [^&lt;&gt;]*      #右括号后面的内容      )+  )*  (?(Open)(?!))     #最外层的右括号前检查                    #若还有未弹出的&quot;Open&quot;                    #则匹配失败&gt;                #最外层的右括号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>平衡组的一个最常见的应用就是匹配HTML,下面这个例子可以匹配嵌套的<code>&lt;div&gt;</code>标签：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div[^</span><span class="token punctuation">></span></span>]\*>[^&lt;>]\*(((?'Open'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div[^</span><span class="token punctuation">></span></span>]\*>)[^&lt;>]\*)+((?'-Open'<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>)[^&lt;>]\*)+)\*(?(Open)(?!))<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="还有些什么东西没提到">还有些什么东西没提到</h3><p>上边已经描述了构造正则表达式的大量元素，但是还有很多没有提到的东西。下面是一些未提到的元素的列表，包含语法和简单的说明。你可以在网上找到更详细的参考资料来学习它们–当你需要用到它们的时候。如果你安装了MSDN Library,你也可以在里面找到.Net下正则表达式详细的文档。这里的介绍很简略，如果你需要更详细的信息，而又没有在电脑上安装MSDN Library,可以查看<a href="http://msdn.microsoft.com/zh-cn/library/az24scfc.aspx">关于正则表达式语言元素的MSDN在线文档</a>。</p><p>表7.尚未详细讨论的语法</p><table><thead><tr><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>\a</td><td>报警字符(打印它的效果是电脑嘀一声)</td></tr><tr><td>\b</td><td>通常是单词分界位置，但如果在字符类里使用代表退格</td></tr><tr><td>\t</td><td>制表符，Tab</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\v</td><td>竖向制表符</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\e</td><td>Escape</td></tr><tr><td>\0nn</td><td>ASCII代码中八进制代码为nn的字符</td></tr><tr><td>\xnn</td><td>ASCII代码中十六进制代码为nn的字符</td></tr><tr><td>\unnnn</td><td>Unicode代码中十六进制代码为nnnn的字符</td></tr><tr><td>\cN</td><td>ASCII控制字符。比如\cC代表Ctrl+C</td></tr><tr><td>\A</td><td>字符串开头(类似^，但不受处理多行选项的影响)</td></tr><tr><td>\Z</td><td>字符串结尾或行尾(不受处理多行选项的影响)</td></tr><tr><td>\z</td><td>字符串结尾(类似$，但不受处理多行选项的影响)</td></tr><tr><td>\G</td><td>当前搜索的开头</td></tr><tr><td>\p{name}</td><td>Unicode中命名为name的字符类，例如\p{IsGreek}</td></tr><tr><td>(?&gt;exp)</td><td>贪婪子表达式</td></tr><tr><td>(?<x>-<y>exp)</td><td>平衡组</td></tr><tr><td>(?im-nsx:exp)</td><td>在子表达式exp中改变处理选项</td></tr><tr><td>(?im-nsx)</td><td>为表达式后面的部分改变处理选项</td></tr><tr><td>(?(exp)yes|no)</td><td>把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no</td></tr><tr><td>(?(exp)yes)</td><td>同上，只是使用空表达式作为no</td></tr><tr><td>(?(name)yes|no)</td><td>如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no</td></tr><tr><td>(?(name)yes)</td><td>同上，只是使用空表达式作为no</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
          <category> 正则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo deploy 时免输用户名密码</title>
      <link href="/25890/"/>
      <url>/25890/</url>
      
        <content type="html"><![CDATA[<h3 id="首先关于Hexo-admin">首先关于Hexo-admin</h3><p>使用了一位大佬修改后的<a href="https://blog.csdn.net/nineya_com/article/details/103384546">Hexo-admin</a>，解决了windows系统插入图片失败问题解决，通过修改源码完美解决，hexo-admin汉化，以及添加按文章存储图片功能（方便管理）</p><h3 id="回归正题">回归正题</h3><ul><li>设置 SSH 使用 hexo deploy 时免输用户名密码</li></ul><h4 id="生成-SSH-密钥">生成 SSH 密钥</h4><p>右键鼠标任意位置打开 <strong>Git Bash Here</strong>，然后输入以下命令</p><pre class="line-numbers language-none"><code class="language-none">cd ~&#x2F;.ssh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <strong>ssh-keygen</strong> 生成密钥</p><pre class="line-numbers language-none"><code class="language-none">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;Generating public&#x2F;private rsa key pair.Enter file in which to save the key (&#x2F;home&#x2F;you&#x2F;.ssh&#x2F;id_rsa):<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用默认的文件名直接enter，接下来显示如下</p><pre class="line-numbers language-none"><code class="language-none">Enter passphrase (empty for no passphrase): [Type a passphrase]Enter same passphrase again: [Type passphrase again]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>按提示输入密码即可（简化流程的话在键入命令 ssh-keygen -t rsa -C “<a href="mailto:your_email@example.com">your_email@example.com</a>“ 以后的三次提示输入都可以直接回车跳过）。</em></p><p><strong>密钥生成成功</strong></p><pre class="line-numbers language-none"><code class="language-none">Your identification has been saved in &#x2F;home&#x2F;you&#x2F;.ssh&#x2F;id_rsa.Your public key has been saved in &#x2F;home&#x2F;you&#x2F;.ssh&#x2F;id_rsa.pub.The key fingerprint is:…………………此处是密钥内容…………………… your_email@example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置-Github-项目的-Deploy-keys">设置 Github 项目的 Deploy keys</h4><p>以我的博客为例，在 <a href="http://izyq.github.io">izyq.github.io</a> 的首页菜单栏中点击 Settings –&gt; Deploy keys –&gt; Add deploy key，然后将生成的 id_rsa.pub 中的内容全选复制到 key 输入框中，然后点击 Add key 完成添加公钥。</p><p>接下来测试配置是否成功</p><pre class="line-numbers language-none"><code class="language-none">$ ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>出现以下内容即表示配置完成并且成功</p><pre class="line-numbers language-none"><code class="language-none">Hi username! You&#39;ve successfully authenticated, but GitHub does notprovide shell access.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="修改hexo根目录的配置文件">修改hexo根目录的配置文件</h4><p>修改_config.yml 中的deploy属性，将repo改为<br><strong><a href="mailto:git@github.com">git@github.com</a>:USERNAME/REPOSITORY.git</strong><br>如下</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repo: git@github.com:izyq&#x2F;izyq.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候再尝试了 <code>$ hexo deploy</code> 就成功了，就不用老是输入密码了！</p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P775TM刷BIOS EC</title>
      <link href="/58477/"/>
      <url>/58477/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面">写在前面</h2><blockquote><p>最近打算换9代U了，是时候升级一下BIOS了，反正在寝室隔离搞完半天学习想休息一下，也没事做，开始折腾起来哈哈<br>这次时想把I58400升级为i9-9900es <em>（因为穷）</em>.<br><code>在d大的包里提供两种刷入方法，一种是dos，一种是win，win这边我打开那个软件第一步就不行，所以只能尝试第二种方法，Dos模式刷入，当然这种方法也更稳定，也是d大更推荐的方法</code></p></blockquote><p>作者提示：_点我一键刷黑.bat或_现在就刷黑.bat执行之后如果出现红字说明你的_说明没读5遍没资格点.exe执行失败了，请多次尝试，如果多次尝试均失败说明你这个机器不兼容，请参考上面的情况二。<br>_点我一键刷黑.bat执行之后如果出现红字那么你执行_现在就刷黑.bat也会出现红字，这是正常的！红字就是刷不了，失败了，请参考上面的情况二。<br>如果执行_点我一键刷黑.bat或_现在就刷黑.bat之后，走进度百分比之后出现红字报错，一定不要关机！一定不要关机！一定不要关机！请重新执行一次，一次不行就两次，两次不行就三次，直到提示绿字操作成功！<br>这种情况贸然关机或重启一定会黑！这种情况贸然关机或重启一定会黑！这种情况贸然关机或重启一定会黑！<br>提示黄字“GbE Region does not exist.”是正常的，因为准系统的BIOS本来就没有“GbE Region”，忽略即可！</p><h3 id="准备">准备</h3><ul><li><p>首先把安全软件卸了，防止捣乱</p></li><li><p>如果你用的是Win8/8.1/10的操作系统，请禁用休眠！禁用休眠！管理员身份命令行执行“<code>powercfg -h off</code>”</p></li><li><p>将U盘或者移动硬盘格式化为FAT32（只能是FAT32而且只能有一个分区），把EFI文件夹复制到U盘根目录！根目录！根目录！确保U盘打开就能看到EFI文件夹！</p></li><li><p>然后把你要刷的BIOS文件改名为BIOS.BIN（注意扩展名也要改，原来是ROM，现在改成BIN），放入EFI/BOOT文件夹内。</p></li><li><p>重启按F2进入BIOS，寻找下列选项并修改</p><ul><li>BIOS主界面-&gt;顶部的Boot-&gt;UEFI Settings-&gt;UEFI Boot-&gt;Enabled</li><li>BIOS主界面-&gt;顶部的Security-&gt;Secure Boot-&gt;Disabled</li></ul></li><li><p>修改好之后，插入U盘，蓝天机型按F4，回车保存，这里会自动重启，我们需要再次进入BIOS，按F7进入启动设备的菜单，选中后按回车从你的U盘启动，进入 EFI Shell 命令行，提示符闪烁就证明准备工作做完了。</p><h3 id="开刷">开刷</h3></li><li><p>1.输入G回车</p></li></ul><blockquote><p><strong>注意:</strong> 输入G回车之后会自动重启，如果没有自动重启说明你这个机器不兼容。<br>这次重启黑屏的时间会比较长，<code>我大约等了15s的样子</code>这时候风扇可能会满速运转，算是进入强冷模式了。<br>这是正常的！无需在意，操作完成后就会恢复，如果害怕你可以重启它也会自己恢复。<br>只要不是命令执行时的强制重启，都没有任何危险性！</p></blockquote><ul><li>继续按F7（蓝天），选择U盘启动，再来进入下一步操作</li><li>2.备份<br>A回车C回车</li></ul><p><img src="https://cdn.jsdelivr.net/gh/izyq/izyq.github.io@master/2021/01/23/bio/pasted-1.png" alt="" loading="lazy"></p><ul><li>3.刷入<br>D回车F回车</li></ul><p><img src="https://cdn.jsdelivr.net/gh/izyq/izyq.github.io@master/2021/01/23/bio/pasted-2.png" alt="" loading="lazy"></p><p>看到successfel就说明刷入成功了<br>接着按F回车，执行第四步</p><ul><li>4.直接拔掉AC电源给机器断电（这步很重要，如果不照做99%的人会刷黑）<br>然后装回硬盘、电池、插回AC电源开机，至此完成刷写过程</li></ul><p><img src="https://cdn.jsdelivr.net/gh/izyq/izyq.github.io@master/2021/01/23/bio/pasted-3.png" alt="" loading="lazy"></p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BIOS </tag>
            
            <tag> P775TM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CUPNotice部署到Linux上</title>
      <link href="/9039/"/>
      <url>/9039/</url>
      
        <content type="html"><![CDATA[<h2 id="安装Python3-7-并解决ssl问题">安装Python3.7 并解决ssl问题</h2><h3 id="安装Python">安装Python</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> zlib zlib-dev openssl-devel sqlite-devel bzip2-devel libffi libffi-devel gcc gcc-c++<span class="token function">wget</span> http://www.openssl.org/source/openssl-1.1.1.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> openssl-1.1.1.tar.gz<span class="token builtin class-name">cd</span> openssl-1.1.1./config <span class="token parameter variable">--prefix</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/openssl shared zlib<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span class="token builtin class-name">echo</span> <span class="token string">"export LD_LIBRARY_PATH=<span class="token variable">$LD_LIBRARY_PATH</span>:<span class="token environment constant">$HOME</span>/openssl/lib"</span> <span class="token operator">>></span> <span class="token environment constant">$HOME</span>/.bash_profile<span class="token builtin class-name">source</span> <span class="token environment constant">$HOME</span>/.bash_profileyum <span class="token function">install</span> zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc <span class="token function">make</span> libffi-devel <span class="token parameter variable">-y</span>yum <span class="token function">install</span> python-pip <span class="token parameter variable">-y</span><span class="token function">wget</span> https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> Python-3.7.0.tgz./configure <span class="token assign-left variable">prefix</span><span class="token operator">=</span>/usr/local/python3  --with-openssl<span class="token operator">=</span><span class="token environment constant">$HOME</span>/openssl<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/python3/bin/python3.7 /usr/bin/python3.7 <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/python3/bin/pip3.7 /usr/bin/pip3.7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-安装openssl">1.安装openssl</h3><p>首先要安装openssl，因为python3需要引用openssl模块，但是centos需要的openssl版本最低为1.0.2，但是centos 默认的为1.0.1，所以需要重新更新openssl</p><hr><h3 id="2-测试https是否可用">2.测试https是否可用</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requesturl <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span>b <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>b<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>报错</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">urllib.error.URLError: <span class="token operator">&lt;</span>urlopen error <span class="token punctuation">[</span>SSL: CERTIFICATE_VERIFY_FAILED<span class="token punctuation">]</span> certificate verify failed <span class="token punctuation">(</span>_ssl.c:833<span class="token punctuation">)</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="解决方法">解决方法</h5><p>全局取消证书验证</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> sslssl._create_default_https_context <span class="token operator">=</span> ssl._create_unverified_context<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-安装依赖">3.安装依赖</h3><p>安装requirements.txt依赖：pip install -r requirements.txt</p><p>问题：cenos自带python2，如电脑上同时装了python2(2.7)和python3(3.7)，当使用pip安装时默认应安装到python2中，pip3安装时应安装到python3中，但奇怪的是使用pip安装时每次都定位到python3中，不知是啥原因，也不知如何将其重定向到python2中，索性手动指定pip到python2中<br>查看pip版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token parameter variable">-V</span> pip <span class="token number">18.0</span> from /usr/local/lib/python3.5/dist-packages/pip <span class="token punctuation">(</span>python <span class="token number">3.5</span><span class="token punctuation">)</span>pip2 <span class="token parameter variable">-V</span> pip <span class="token number">8.1</span>.1 from /usr/lib/python2.7/dist-packages <span class="token punctuation">(</span>python <span class="token number">2.7</span><span class="token punctuation">)</span>pip3 <span class="token parameter variable">-V</span> pip <span class="token number">18.0</span> from /usr/local/lib/python3.5/dist-packages/pip <span class="token punctuation">(</span>python <span class="token number">3.5</span><span class="token punctuation">)</span>解决方法pip指定python版本安装安装到python2.7版本中：sudo pip2 <span class="token function">install</span> 模块名 或 python2 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> 模块名安装到python3.5版本中：sudo pip3 <span class="token function">install</span> 模块名 或 python3.5 <span class="token parameter variable">-m</span> pip <span class="token function">install</span> 模块名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-linux-中后台运行python脚本">4.linux 中后台运行python脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> python yourscript.py <span class="token operator">&amp;</span>可以让你的程序在后台运行，控制台输出导向nohup.out文件使用nobup命令 结尾处加一个<span class="token operator">&amp;</span> 符号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2、关闭命令">2、关闭命令</h5><h6 id="1、查看进程">1、查看进程</h6><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">    <span class="token comment"># ps -ef|grep python</span>    或者    <span class="token comment"># ps -ef|grep Job</span><span class="token number">2</span>、关闭进程    <span class="token comment"># kill -9 19913</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3、检查">3、检查</h5><p>用1中查看进程的命令，检查或确认进程是否真正被关闭。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
